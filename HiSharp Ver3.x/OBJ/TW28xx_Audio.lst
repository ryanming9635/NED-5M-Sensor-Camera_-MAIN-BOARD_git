C51 COMPILER V9.01   TW28XX_AUDIO                                                          07/27/2018 15:46:01 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TW28XX_AUDIO
OBJECT MODULE PLACED IN .\OBJ\TW28xx_Audio.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE TW28xx_Audio.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\OB
                    -J\TW28xx_Audio.lst) OBJECT(.\OBJ\TW28xx_Audio.obj)

line level    source

   1          //  **************************************************************************
   2          //
   3          //       Copyright (c) 1992-2006 Professonal Computer Technology Co., Ltd
   4          //
   5          //      All rights are reserved. Reproduction in whole or in parts is
   6          //  prohibited without the prior written consent of the copyright owner.
   7          //  --------------------------------------------------------------------------
   8          //
   9          //  Module: TW28xx_Audio.H
  10          //
  11          //  Purpose: Implementation of TW28xx Audio.
  12          //
  13          //  Version: 0.01                                   2006/10/25 09:05¤W¤È
  14          //
  15          //  Compiler: Keil 8051 C Compiler v7.2
  16          //
  17          //  Reference:
  18          //
  19          //
  20          //
  21          //  --------------------------------------------------------------------------
  22          //  Modification:
  23          //
  24          //      R0.01 2006/10/25 09:05¤W¤È Phoenix Chuang
  25          //      Reason:
  26          //              1. Original.
  27          //      Solution:
  28          //      
  29          //  **************************************************************************
  30          //      -----------------------------------
  31          //                      Header Files
  32          //      ----------------------------------- 
  33          #include "types.h"
  34          #include "TW28xx_Audio.h"
  35          #include "BusCtrl.h"
  36          
  37          
  38          //      ------------------------------------
  39          //                      Macro Definitions
  40          //      ------------------------------------ 
  41          
  42          
  43          //      ------------------------------------
  44          //                      Type Definitions
  45          //      ------------------------------------
  46          
  47          
  48          //      ------------------------------------
  49          //                      Variables Definitions
  50          //      ------------------------------------
  51          
  52          
  53          //      ------------------------------------
  54          //                      Function Prototypes
C51 COMPILER V9.01   TW28XX_AUDIO                                                          07/27/2018 15:46:01 PAGE 2   

  55          //      ------------------------------------
  56          
  57          
  58          // ===========================================================================
  59          //                      Parallel function description
  60          void PCT_AudioRegList(void)
  61          {       
  62   1              printf("***** %bx == %bx *****\n",0x4c, TW28_ReadByte(0, 0x4c) );
  63   1              printf("***** %bx == %bx *****\n",0x60, TW28_ReadByte(0, 0x60) );
  64   1              printf("***** %bx == %bx *****\n",0x61, TW28_ReadByte(0, 0x61) );
  65   1              printf("***** %bx == %bx *****\n",0x62, TW28_ReadByte(0, 0x62) );
  66   1              printf("***** %bx == %bx *****\n",0x63, TW28_ReadByte(0, 0x63) );
  67   1      
  68   1              printf("***** %bx == %bx *****\n",0x64, TW28_ReadByte(0, 0x64) );
  69   1              printf("***** %bx == %bx *****\n",0x65, TW28_ReadByte(0, 0x65) );
  70   1              printf("***** %bx == %bx *****\n",0x66, TW28_ReadByte(0, 0x66) );
  71   1              printf("***** %bx == %bx *****\n",0x67, TW28_ReadByte(0, 0x67) );
  72   1              printf("***** %bx == %bx *****\n",0x68, TW28_ReadByte(0, 0x68) );
  73   1              printf("***** %bx == %bx *****\n",0x69, TW28_ReadByte(0, 0x69) );
  74   1              printf("***** %bx == %bx *****\n",0x6A, TW28_ReadByte(0, 0x6A) );
  75   1              printf("***** %bx == %bx *****\n",0x6B, TW28_ReadByte(0, 0x6B) );
  76   1      
  77   1              printf("***** %bx == %bx *****\n",0x6C, TW28_ReadByte(0, 0x6C) );
  78   1              printf("***** %bx == %bx *****\n",0x6D, TW28_ReadByte(0, 0x6D) );
  79   1              printf("***** %bx == %bx *****\n",0x6E, TW28_ReadByte(0, 0x6E) );
  80   1              printf("***** %bx == %bx *****\n",0x6F, TW28_ReadByte(0, 0x6F) );
  81   1              printf("***** %bx == %bx *****\n",0x70, TW28_ReadByte(0, 0x70) );
  82   1      
  83   1              printf("***** %bx == %bx *****\n",0x71, TW28_ReadByte(0, 0x71) );
  84   1              printf("***** %bx == %bx *****\n",0x72, TW28_ReadByte(0, 0x72) );
  85   1              printf("***** %bx == %bx *****\n",0x73, TW28_ReadByte(0, 0x73) );
  86   1              printf("***** %bx == %bx *****\n",0x74, TW28_ReadByte(0, 0x74) );
  87   1      }
  88          
  89          // ===========================================================================
  90          //
  91          //              Audio Inputer & Output Gain Control
  92          //
  93          BYTE PCT_AudioGainCtrl(U8 _dvc, U8 _channel, U8 _gain)
  94          {
  95   1              register U8     dat;
  96   1              register U8 result;
  97   1      
  98   1              code RW_REG_DATA chanData[]= {
  99   1                      {AIGAIN_CH01_ADDR, AIGAIN_CH00_MASK, 0},
 100   1                      {AIGAIN_CH01_ADDR, AIGAIN_CH01_MASK, 4},
 101   1                      {AIGAIN_CH23_ADDR, AIGAIN_CH03_MASK, 0},
 102   1                      {AIGAIN_CH23_ADDR, AIGAIN_CH04_MASK, 4},
 103   1                      {AIGAIN_CHAO_ADDR, AIGAIN_CHAO_MASK, 4}, 
 104   1              };
 105   1              
 106   1              #define AGAIN_PAGE      GETHBYTE(chanData[_channel].addr)
 107   1              #define AGAIN_ADDR      GETLBYTE(chanData[_channel].addr)
 108   1              #define AGAIN_MASK      chanData[_channel].mask
 109   1      
 110   1              _dvc = 0;
 111   1              dat = TW28_ReadByte(AGAIN_PAGE, AGAIN_ADDR );
 112   1                      
 113   1              dat &= AGAIN_MASK;
 114   1              dat |= _gain<<chanData[_channel].offset;
 115   1              
 116   1              TW28_WriteByte(AGAIN_PAGE, AGAIN_ADDR, dat);
C51 COMPILER V9.01   TW28XX_AUDIO                                                          07/27/2018 15:46:01 PAGE 3   

 117   1              result = TW28_ReadByte(AGAIN_PAGE, AGAIN_ADDR );
 118   1              return true;
 119   1      }
 120          
 121          
 122          // ===========================================================================
 123          //
 124          //      Audio Miaxing Ratio Control
 125          //
 126          BYTE PCT_AudioMixCtrl(U8 _dvc, U8 _channel, U8 _gain)
 127          {
 128   1              register U8     dat;
 129   1              register U8 result;
 130   1      
 131   1              code RW_REG_DATA chanData[]= {
 132   1                      {MIXRATIO_CH01_ADDR,MIXRATIO_CH00_MASK, 0},
 133   1                      {MIXRATIO_CH01_ADDR,MIXRATIO_CH01_MASK, 4},
 134   1                      {MIXRATIO_CH23_ADDR,MIXRATIO_CH02_MASK, 0},
 135   1                      {MIXRATIO_CH23_ADDR,MIXRATIO_CH03_MASK, 4},
 136   1                      {MIXRATIO_CHAO_ADDR,MIXRATIO_CHAO_MASK, 0}, 
 137   1              };
 138   1              
 139   1              #define AMIX_PAGE       GETHBYTE(chanData[_channel].addr)
 140   1              #define AMIX_ADDR       GETLBYTE(chanData[_channel].addr)
 141   1              #define AMIX_MASK       chanData[_channel].mask
 142   1      
 143   1              _dvc = 0;
 144   1              dat = TW28_ReadByte(AMIX_PAGE, AMIX_ADDR );
 145   1                      
 146   1              dat &= AMIX_MASK;
 147   1              dat |= _gain<<chanData[_channel].offset;
 148   1              
 149   1              TW28_WriteByte(AMIX_PAGE, AMIX_ADDR, dat);
 150   1              result = TW28_ReadByte(AMIX_PAGE, AMIX_ADDR );
 151   1      
 152   1              PCT_AudioSelLive(_dvc, 0xFF);
 153   1              return true;
 154   1      }
 155          
 156          // ===========================================================================
 157          //
 158          //      Audio Mixing Mute Control
 159          //
 160          BYTE PCT_AudioMixMute(U8 _dvc, U8 _ch, U8 _ctrl)
 161          {
 162   1              data U8 dat;
 163   1      
 164   1              #define MIXMUTE_PAGE GETHBYTE(ADO_MIX_MUTE_ADDR)
 165   1              #define MIXMUTE_ADDR GETLBYTE(ADO_MIX_MUTE_ADDR)
 166   1              
 167   1              _dvc = 0;
 168   1              dat = TW28_ReadByte(MIXMUTE_PAGE, MIXMUTE_ADDR );
 169   1              if( _ctrl==ON ) {
 170   2                      dat &= ~_ch;
 171   2              } else  {
 172   2                      dat |=  _ch;
 173   2              }
 174   1              TW28_WriteByte(MIXMUTE_PAGE, MIXMUTE_ADDR, dat);
 175   1              
 176   1              return true;
 177   1      }
 178          
C51 COMPILER V9.01   TW28XX_AUDIO                                                          07/27/2018 15:46:01 PAGE 4   

 179          // ===========================================================================
 180          //
 181          // Audio Liive Select Control
 182          //
 183          BYTE PCT_AudioSelLive(U8 _dvc, U8 _chan)
 184          {
 185   1              #define SEL_LMMOD_PAGE GETHBYTE(ADO_SEL_LMMOD_ADDR)
 186   1              #define SEL_LMMOD_ADDR GETLBYTE(ADO_SEL_LMMOD_ADDR)
 187   1      
 188   1              _dvc = 0;
 189   1              if( _chan==0xFF ) {
 190   2                      TW28_WriteByte(SEL_LMMOD_PAGE, SEL_LMMOD_ADDR, ADO_MIX_MODE);
 191   2                      return true;
 192   2              }
 193   1                      
 194   1              _chan |= ADO_LIVE_MODE;
 195   1              TW28_WriteByte(SEL_LMMOD_PAGE, SEL_LMMOD_ADDR, _chan);
 196   1              return 0;
 197   1      }
 198          
 199          
 200          // ===========================================================================
 201          //
 202          //
 203          //
 204          
 205          
 206          // ===========================================================================
 207          // END of File 
 208          // ===========================================================================
 209          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    850    ----
   CONSTANT SIZE    =     64    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
