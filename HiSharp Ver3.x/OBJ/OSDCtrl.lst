C51 COMPILER V9.01   OSDCTRL                                                               07/27/2018 15:46:01 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE OSDCTRL
OBJECT MODULE PLACED IN .\OBJ\OSDCtrl.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE OSDCtrl.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\OBJ\OSD
                    -Ctrl.lst) OBJECT(.\OBJ\OSDCtrl.obj)

line level    source

   1          //  **************************************************************************
   2          //
   3          //       Copyright (c) 1992-2006 Professonal Computer Technology Co., Ltd
   4          //
   5          //      All rights are reserved. Reproduction in whole or in parts is
   6          //  prohibited without the prior written consent of the copyright owner.
   7          //  --------------------------------------------------------------------------
   8          //
   9          //  Module: OSDCtrl.C
  10          //
  11          //  Purpose: Implementation of OSD Control.
  12          //
  13          //  Version: 0.01                                   2006/12/13 05:12¤U¤È
  14          //
  15          //  Compiler: Keil 8051 C Compiler v7.2
  16          //
  17          //  Reference:
  18          //
  19          //
  20          //
  21          //  --------------------------------------------------------------------------
  22          //  Modification:
  23          //
  24          //      R0.01 2006/12/13 05:12¤U¤È Phoenix Chuang
  25          //      Reason:
  26          //              1. Original.
  27          //      Solution:
  28          //      
  29          //  **************************************************************************
  30          //      -----------------------------------
  31          //                      Header Files
  32          //      ----------------------------------- 
  33          #include "types.h"
  34          #include "OSDCtrl.h"
  35          #include "BusCtrl.h"
  36          
  37          #include "Font.h"
  38          
  39          //      ------------------------------------
  40          //                      Macro Definitions
  41          //      ------------------------------------ 
  42          #define WriteByteOSD(b, c)                      PCT_WriteAsicByte(0, DVC_PG2, b, c)
  43          #define ReadByteOSD(a)                          PCT_ReadAsicByte(0, DVC_PG2, a)
  44          #define ReadOSDMemWr()                          PCT_ReadAsicByte(0, DVC_PG2,0x0A)
  45          #define ReadOSDBufWr()                          PCT_ReadAsicByte(0, DVC_PG2,0x04)
  46          
  47          
  48          //      ------------------------------------
  49          //                      Type Definitions
  50          //      ------------------------------------
  51          
  52          
  53          //      ------------------------------------
  54          //                      Variables Definitions
C51 COMPILER V9.01   OSDCTRL                                                               07/27/2018 15:46:01 PAGE 2   

  55          //      ------------------------------------
  56                  U8 bdata bitdat;
  57                  sbit DAT_BIT0 = bitdat^0;
  58                  sbit DAT_BIT1 = bitdat^1;
  59                  sbit DAT_BIT2 = bitdat^2;
  60                  sbit DAT_BIT3 = bitdat^3;
  61                  sbit DAT_BIT4 = bitdat^4;
  62                  sbit DAT_BIT5 = bitdat^5;
  63                  sbit DAT_BIT6 = bitdat^6;
  64                  sbit DAT_BIT7 = bitdat^7;
  65          
  66                  data U8 foreColor;
  67                  data U8 backColor;
  68          
  69          
  70          //      ------------------------------------
  71          //                      Function Prototypes
  72          //      ------------------------------------
  73          
  74          
  75          
  76          // ===========================================================================
  77          //                      Parallel function description
  78          // ===========================================================================
  79          //
  80          // Set Foreground Color range:0-63
  81          //
  82          void PCT_PreSetForegroundColor(U8 _color)
  83          {
  84   1              foreColor = _color;
  85   1              //printf("=== Fore Color = %bx === \n", foreColor);
  86   1      }
  87          
  88          // ===========================================================================
  89          //
  90          // Set Foreground Color range:0-63
  91          //
  92          void PCT_PreSetBackgroundColor(U8 _color)
  93          {
  94   1              backColor = _color;
  95   1              //printf("=== Back Color = %bx === \n", backColor);
  96   1      }
  97          
  98          // ===========================================================================
  99          //
 100          // Set OSD Index Color Table    
 101          //
 102          void PCT_SetOSDColor(U8 _pth, U8 _col_num, U8 _y, U8 _cb, U8 _cr)
 103          {
 104   1              WriteByteOSD(0x0b, _y);                                         //... Y
 105   1              WriteByteOSD(0x0c, _cb);                                        //... Cb
 106   1              WriteByteOSD(0x0d, _cr);                                        //... Cr
 107   1              ifBitSet(_pth,PTH_X)
 108   1                      WriteByteOSD(0x0e, BIT7|_col_num);              //... address
 109   1              else
 110   1                      WriteByteOSD(0x0e, BIT7|BIT6|_col_num); //... address
 111   1      }
 112          
 113          // ===========================================================================
 114          //
 115          //              
 116          //
C51 COMPILER V9.01   OSDCTRL                                                               07/27/2018 15:46:01 PAGE 3   

 117          void PCT_InitOSDColor(void)
 118          {
 119   1              WriteByteOSD(0x1F, 0xC0);//<William-960820>blink DELAY2Sec
 120   1              WriteByteOSD(0x0F, 0x0C);
 121   1              PCT_SetOSDColor(PTH_Y, OSD_COL_RED, 0x4c,0x54,0xff);
 122   1              PCT_SetOSDColor(PTH_Y, OSD_COL_GRN, 76, 84, 74);
 123   1              PCT_SetOSDColor(PTH_Y, OSD_COL_BLU, 0x1d,0xff,0x6b);
 124   1      
 125   1              PCT_SetOSDColor(PTH_X, OSD_COL_BLK, 0x00,0x80,0x80);
 126   1              PCT_SetOSDColor(PTH_X, OSD_COL_RED, 0x4c,0x54,0xff);
 127   1              PCT_SetOSDColor(PTH_X, OSD_COL_GRN, 0x4B, 0x55, 0x4A);
 128   1              PCT_SetOSDColor(PTH_X, OSD_COL_BLU, 0x1d,0xff,0x6b);
 129   1              PCT_SetOSDColor(PTH_X, OSD_COL_100WHT,0xf0,0x80,0x80);
 130   1              PCT_SetOSDColor(PTH_X, OSD_COL_75WHT, 0xc0,0x80,0x80);
 131   1              PCT_SetOSDColor(PTH_X, OSD_COL_50WHT, 0x7f,0x80,0x80);
 132   1              PCT_SetOSDColor(PTH_X, OSD_COL_25WHT, 0x3f,0x80,0x80);
 133   1              PCT_SetOSDColor(PTH_X, OSD_COL_ORNG, 0x95,0x4f,0xb5);
 134   1              PCT_SetOSDColor(PTH_X, OSD_COL_CYN, 0xb2,0xaa,0x00);
 135   1              PCT_SetOSDColor(PTH_X, OSD_COL_MGN, 0x69,0xd4,0xea);
 136   1              PCT_SetOSDColor(PTH_X, OSD_COL_OCN, 0x61,0xb5,0x3a);
 137   1              PCT_SetOSDColor(PTH_X, OSD_COL_YLW, 0xE1, 0x00, 0x94);
 138   1              PCT_SetOSDColor(PTH_X, OSD_COL_RED255, 0x4c,0x54,0xff);
 139   1      
 140   1              backColor=0;
 141   1              foreColor=0;
 142   1      }
 143          
 144          // ===========================================================================
 145          //
 146          //      Setting Page for Draw OSD       
 147          //
 148          void PCT_SetOSDDrawPage(U8 _page)
 149          {
 150   1              _page = (_page<<2) | (ReadByteOSD(0x0A)&0xC3);
 151   1              WriteByteOSD(0x0A, _page);
 152   1      }
 153          
 154          // ===========================================================================
 155          //
 156          //      Enable OSD Page 0:OFF 1-6:Page 1-6 ON 
 157          //
 158          void PCT_EnShowOSDPage(U8 _page)
 159          {
 160   1              if(_page == WRPHY_PAGE0) {
 161   2                      _page = (_page&0x07)<<4|(ReadByteOSD(0x0F)&0x0F);
 162   2                      WriteByteOSD(0x0F, SetBit(_page, BIT1));
 163   2              } else {
 164   2                      _page = (_page&0x07)<<4|(ReadByteOSD(0x0F)&0x0F);
 165   2                      WriteByteOSD(0x0F, SetBit(_page, BIT3));
 166   2              }
 167   1      }
 168          
 169          // ===========================================================================
 170          //
 171          //      Disable OSD Page Path X
 172          //
 173          void PCT_DisShowOSDPage(U8 _bit)
 174          {
 175   1              register dat;
 176   1              dat = (ReadByteOSD(0x0F)&0x0F);
 177   1              WriteByteOSD(0x0F, ClearBit(dat, _bit));
 178   1      }
C51 COMPILER V9.01   OSDCTRL                                                               07/27/2018 15:46:01 PAGE 4   

 179          
 180          // ===========================================================================
 181          //
 182          // Full Color on OSD of X Channel       
 183          // _posx  : Start point for Horizontal (unit = 8 Dots)
 184          // _posy  : Start point for Vertical   (unit = 8 Dots)
 185          //
 186          void PCT_FullColorOnOSD(U8 _posx, U16 _posy, U8 _wide, U16 _high)
 187          {
 188   1              WriteByteOSD(0x00, backColor);          //... 1st pixel
 189   1              WriteByteOSD(0x01, backColor);          //... 2nd pixel
 190   1              WriteByteOSD(0x02, backColor);          //... 3rd pixel
 191   1              WriteByteOSD(0x03, backColor);          //... 4th pixel
 192   1      
 193   1              _posx <<= 1;
 194   1              _posy <<= 3;
 195   1              _wide = _posx+((_wide)<<1)-1;
 196   1              _high = _posy+((_high)<<3)-1;
 197   1      
 198   1              WriteByteOSD(0x05, _posx);
 199   1              WriteByteOSD(0x06, _wide);
 200   1              WriteByteOSD(0x07, _posy&0xff);
 201   1              WriteByteOSD(0x08, _high&0xff);
 202   1              WriteByteOSD(0x09, 0x02|((_posy>>8)<<2)+(_high>>8));    //... ~ even field
 203   1      
 204   1              WriteByteOSD(0x0A, 0xc0|ReadByteOSD(0x0A));                     //... acceleration|x path
 205   1              while(ReadOSDMemWr()&BIT7){}    //... wait finishing write for even field
 206   1      }
 207          
 208          void PCT_ClearOSDPageX(U8 _page)
 209          {
 210   1              PCT_SetOSDDrawPage(_page);
 211   1      
 212   1              PCT_PreSetBackgroundColor(OSD_COL_CLR);
 213   1              PCT_FullColorOnOSD(0,0,90,38);  
 214   1      }
 215          
 216          
 217          
 218          
 219          
 220          
 221          // ===========================================================================
 222          //
 223          // Draw 16 Dots to OSD Dtat Buuffer 0-15
 224          //
 225          void PCT_WriteOSDDataBufferX(U8 _index, PU8 _dat)
 226          {
 227   1              bitdat = _dat[0];
 228   1              WriteByteOSD(0x00, DAT_BIT7 ? (foreColor) : (backColor));               //... 1st pixel
 229   1              WriteByteOSD(0x01, DAT_BIT6 ? (foreColor) : (backColor));               //... 2nd pixel
 230   1              WriteByteOSD(0x02, DAT_BIT5 ? (foreColor) : (backColor));               //... 3rd pixel
 231   1              WriteByteOSD(0x03, DAT_BIT4 ? (foreColor) : (backColor));               //... 4th pixel
 232   1              WriteByteOSD(0x04, 0x80|_index);                        //... write to buffer
 233   1              _index++;
 234   1              
 235   1              WriteByteOSD(0x00, DAT_BIT3 ? (foreColor) : (backColor));               //... 1st pixel
 236   1              WriteByteOSD(0x01, DAT_BIT2 ? (foreColor) : (backColor));               //... 2nd pixel
 237   1              WriteByteOSD(0x02, DAT_BIT1 ? (foreColor) : (backColor));               //... 3rd pixel
 238   1              WriteByteOSD(0x03, DAT_BIT0 ? (foreColor) : (backColor));               //... 4th pixel
 239   1              WriteByteOSD(0x04, 0x80|_index);                        //... write to buffer
 240   1              _index++;
C51 COMPILER V9.01   OSDCTRL                                                               07/27/2018 15:46:01 PAGE 5   

 241   1              
 242   1              bitdat = _dat[1];
 243   1              WriteByteOSD(0x00, DAT_BIT7 ? (foreColor) : (backColor));               //... 1st pixel
 244   1              WriteByteOSD(0x01, DAT_BIT6 ? (foreColor) : (backColor));               //... 2nd pixel
 245   1              WriteByteOSD(0x02, DAT_BIT5 ? (foreColor) : (backColor));               //... 3rd pixel
 246   1              WriteByteOSD(0x03, DAT_BIT4 ? (foreColor) : (backColor));               //... 4th pixel
 247   1              WriteByteOSD(0x04, 0x80|_index);                        //... write to buffer
 248   1              _index++;
 249   1              
 250   1              WriteByteOSD(0x00, DAT_BIT3 ? (foreColor) : (backColor));               //... 1st pixel
 251   1              WriteByteOSD(0x01, DAT_BIT2 ? (foreColor) : (backColor));               //... 2nd pixel
 252   1              WriteByteOSD(0x02, DAT_BIT1 ? (foreColor) : (backColor));               //... 3rd pixel
 253   1              WriteByteOSD(0x03, DAT_BIT0 ? (foreColor) : (backColor));               //... 4th pixel
 254   1              WriteByteOSD(0x04, 0x80|_index);                        //... write to buffer
 255   1      }
 256          
 257          // ===========================================================================
 258          //
 259          // Draw 16x16 Dots for word, tatal 4 words is 64 x 16 Dots
 260          // _posx  : Start point for Horizontal (unit = 8 Dots)
 261          // _posy  : Start point for Vertical   (unit = 8 Dots)
 262          // _len   : 1-4: 1-4 words
 263          // _index : Ascii code for string
 264          //
 265          void PCT_WriteOSDFntX(U8 _posx, U16 _posy, U8 _len, PU8 _indx)  //... only one _pth at once
 266          {
 267   1              data U8 i,j,posx;
 268   1              PCHAR charPtr[4];       
 269   1              
 270   1              _posx <<= 1;
 271   1              posx = _posx = _posx + BOX_OFFSET_X;    
 272   1              _posy <<= 3;
 273   1              _posy += BOX_OFFSET_Y;
 274   1              charPtr[0] = FONT_TABLE + (_indx[0]*32);
 275   1              charPtr[1] = FONT_TABLE + (_indx[1]*32);
 276   1              charPtr[2] = FONT_TABLE + (_indx[2]*32);
 277   1              charPtr[3] = FONT_TABLE + (_indx[3]*32);
 278   1              
 279   1              if(_len>4) _len=4;
 280   1              for(i=0; i<32; i+=2) {
 281   2                      for(j=0; j<_len; j++) PCT_WriteOSDDataBufferX( j<<2, charPtr[j]+i);
 282   2                      WriteByteOSD(0x05, posx);
 283   2                      WriteByteOSD(0x07, _posy&0xff);
 284   2      
 285   2                      WriteByteOSD(0x09, (((_len*4-1)<<4)|((_posy)>>8)<<2));                  //... start: OSD_POS_V_ODD, end: OSD_POS_V_ODD
 286   2                      WriteByteOSD(0x0A, 0x80|(ReadByteOSD(0x0A)&0x3F));                              //... x path
 287   2                      while(ReadOSDMemWr()&BIT7);                                                                             //... wait finishing write for odd field
 288   2      
 289   2                      WriteByteOSD(0x09, (((_len*4-1)<<4)|((_posy)>>8)<<2)|0x08);             //... start: OSD_POS_V_ODD, end: OSD_POS_V_
             -ODD
 290   2                      WriteByteOSD(0x0A, 0x80|(ReadByteOSD(0x0A)&0x3F));                              //... x path
 291   2                      while(ReadOSDMemWr()&BIT7);                                                                             //... wait finishing write for odd field
 292   2      
 293   2                      _posy++;
 294   2              }
 295   1      }
 296          
 297          // ===========================================================================
 298          //
 299          // Clear 16x16 Dots for word, tatal N words
 300          // _posx  : Start point for Horizontal (unit = 8 Dots)
 301          // _posy  : Start point for Vertical   (unit = 8 Dots)
C51 COMPILER V9.01   OSDCTRL                                                               07/27/2018 15:46:01 PAGE 6   

 302          // _len   : 1-4: 1-4 words
 303          //
 304          void PCT_ClearWordsPathX(U8 _posx, U16 _posy, U8 _len)  
 305          {
 306   1              register U8     wide;
 307   1              register U16 high;
 308   1      
 309   1              WriteByteOSD(0x00, backColor);          //... 1st pixel
 310   1              WriteByteOSD(0x01, backColor);          //... 2nd pixel
 311   1              WriteByteOSD(0x02, backColor);          //... 3rd pixel
 312   1              WriteByteOSD(0x03, backColor);          //... 4th pixel
 313   1      
 314   1              _posx <<= 1;
 315   1              _posx += BOX_OFFSET_X;    
 316   1              _posy <<= 3;
 317   1              _posy += BOX_OFFSET_Y;
 318   1      
 319   1              wide = _posx+(_len<<2)-1;
 320   1              high = _posy+15;
 321   1      
 322   1              WriteByteOSD(0x05, _posx);
 323   1              WriteByteOSD(0x06, wide);
 324   1              WriteByteOSD(0x07, _posy&0xff);
 325   1              WriteByteOSD(0x08, high&0xff);
 326   1              WriteByteOSD(0x09, 0x02|((_posy>>8)<<2)+(high>>8));     //... ~ even field
 327   1      
 328   1              WriteByteOSD(0x0A, 0xc0|ReadByteOSD(0x0A));                     //... acceleration|x path
 329   1              while(ReadOSDMemWr()&BIT7){}    //... wait finishing write for even field
 330   1      }
 331          
 332          // ===========================================================================
 333          //
 334          // Draw 16 Dots to OSD Dtat Buuffer 0-15
 335          //
 336          void PCT_WriteOSDDataBufferY(U8 _index, PU8 _dat)
 337          {
 338   1              bitdat = _dat[0];
 339   1              WriteByteOSD(0x00, ((DAT_BIT7 ? (foreColor) : (backColor))<<4)|(DAT_BIT6 ? (foreColor) : (backColor)));         
             -//... 1st 2nd pixel
 340   1              WriteByteOSD(0x01, ((DAT_BIT5 ? (foreColor) : (backColor))<<4)|(DAT_BIT4 ? (foreColor) : (backColor)));         
             -//... 3rd 4th pixel
 341   1              WriteByteOSD(0x02, ((DAT_BIT3 ? (foreColor) : (backColor))<<4)|(DAT_BIT2 ? (foreColor) : (backColor)));         
             -//... 3rd 4th pixel
 342   1              WriteByteOSD(0x03, ((DAT_BIT1 ? (foreColor) : (backColor))<<4)|(DAT_BIT0 ? (foreColor) : (backColor)));         
             -//... 3rd 4th pixel
 343   1              WriteByteOSD(0x04, 0x80|_index++);                      //... write to buffer
 344   1              
 345   1              bitdat = _dat[1];
 346   1              WriteByteOSD(0x00, ((DAT_BIT7 ? (foreColor) : (backColor))<<4)|(DAT_BIT6 ? (foreColor) : (backColor)));         
             -//... 1st 2nd pixel
 347   1              WriteByteOSD(0x01, ((DAT_BIT5 ? (foreColor) : (backColor))<<4)|(DAT_BIT4 ? (foreColor) : (backColor)));         
             -//... 3rd 4th pixel
 348   1              WriteByteOSD(0x02, ((DAT_BIT3 ? (foreColor) : (backColor))<<4)|(DAT_BIT2 ? (foreColor) : (backColor)));         
             -//... 3rd 4th pixel
 349   1              WriteByteOSD(0x03, ((DAT_BIT1 ? (foreColor) : (backColor))<<4)|(DAT_BIT0 ? (foreColor) : (backColor)));         
             -//... 3rd 4th pixel
 350   1              WriteByteOSD(0x04, 0x80|_index++);                      //... write to buffer
 351   1              
 352   1      }
 353          
 354          // ===========================================================================
 355          //
C51 COMPILER V9.01   OSDCTRL                                                               07/27/2018 15:46:01 PAGE 7   

 356          // Draw 16x16 Dots for word, tatal 8 words is 128 x 16 Dots
 357          // _posx  : Start point for Horizontal (unit = 8 Dots)
 358          // _posy  : Start point for Vertical   (unit = 8 Dots)
 359          // _len   : 1-4: 1-8 words
 360          // _index : Ascii code for string
 361          //
 362          void PCT_WriteOSDFntY(U8 _posx, U16 _posy, U8 _len, PU8 _indx)  //... only one _pth at once
 363          {
 364   1              data U8 i,j;
 365   1              PCHAR charPtr[8];       
 366   1              
 367   1              _posx <<= 1;
 368   1              _posx += YFONT_OFFSET_X;
 369   1              _posy <<= 3;
 370   1              _posy += YFONT_OFFSET_Y;
 371   1      
 372   1              if(_len>8) _len=8;
 373   1              for(i=0; i<_len; i++)
 374   1                      charPtr[i] = FONT_TABLE + (_indx[i]*32);
 375   1              
 376   1              for(i=0; i<32; i+=2) {
 377   2                      for(j=0; j<_len; j++) PCT_WriteOSDDataBufferY( j<<1, charPtr[j]+i);
 378   2                      WriteByteOSD(0x05, _posx);
 379   2                      WriteByteOSD(0x07, _posy&0xff);
 380   2                      WriteByteOSD(0x09, (((_len<<5)-0x10)|((_posy)>>8)<<2));                 //... start: OSD_POS_V_ODD, end: OSD_POS_V_ODD
 381   2                      WriteByteOSD(0x0A, 0x80|(ReadByteOSD(0x0A)&0x3F));                              //... x path
 382   2                      while(ReadOSDMemWr()&BIT7);                                                     //... wait finishing write for odd field
 383   2                      _posy++;
 384   2              }
 385   1      }
 386          
 387          //==================================================================================
 388          //
 389          // Show String on OSD
 390          //
 391          void PCT_ShowOSDString(U8 _path, U8 _addrx, U8 _addry, PCHAR _strptr)
 392          {
 393   1              register signed char slen;
 394   1      
 395   1              slen = strlen(_strptr);
 396   1              if(slen<0) return; 
 397   1              ifBitSet(_path, PTH_X) {
 398   2                      do{
 399   3                              PCT_WriteOSDFntX(_addrx, _addry, (U8) slen, _strptr);
 400   3                              slen -= 4;
 401   3                              _strptr+=4;
 402   3                              _addrx+=8;
 403   3                      }while(slen>0);
 404   2              } else {
 405   2                      do{
 406   3                              PCT_WriteOSDFntY(_addrx, _addry, (U8) slen, _strptr);
 407   3                              slen -= 8;
 408   3                              _strptr+=8;
 409   3                              _addrx+=8;
 410   3                      }while(slen>0);
 411   2              }
 412   1              PTC_SwitchToI2CMode();
 413   1      }
 414          
 415          //==================================================================================
 416          //
 417          //
C51 COMPILER V9.01   OSDCTRL                                                               07/27/2018 15:46:01 PAGE 8   

 418          //
 419          
 420          
 421          // ===========================================================================
 422          // END of File 
 423          // ===========================================================================


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2586    ----
   CONSTANT SIZE    =   3744    ----
   XDATA SIZE       =   ----      88
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
