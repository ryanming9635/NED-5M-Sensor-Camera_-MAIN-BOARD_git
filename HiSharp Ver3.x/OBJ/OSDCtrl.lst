C51 COMPILER V9.50a   OSDCTRL                                                              12/04/2018 12:27:03 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE OSDCTRL
OBJECT MODULE PLACED IN .\OBJ\OSDCtrl.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE OSDCtrl.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\OBJ\OSD
                    -Ctrl.lst) TABS(2) OBJECT(.\OBJ\OSDCtrl.obj)

line level    source

   1          //  **************************************************************************
   2          //
   3          //       Copyright (c) 1992-2006 Professonal Computer Technology Co., Ltd
   4          //
   5          //      All rights are reserved. Reproduction in whole or in parts is
   6          //  prohibited without the prior written consent of the copyright owner.
   7          //  --------------------------------------------------------------------------
   8          //
   9          //  Module: OSDCtrl.C
  10          //
  11          //  Purpose: Implementation of OSD Control.
  12          //
  13          //  Version: 0.01                                   2006/12/13 05:12¤U¤È
  14          //
  15          //  Compiler: Keil 8051 C Compiler v7.2
  16          //
  17          //  Reference:
  18          //
  19          //
  20          //
  21          //  --------------------------------------------------------------------------
  22          //  Modification:
  23          //
  24          //  R0.01 2006/12/13 05:12¤U¤È Phoenix Chuang
  25          //  Reason:
  26          //    1. Original.
  27          //  Solution:
  28          //  
  29          //  **************************************************************************
  30          //  -----------------------------------
  31          //      Header Files
  32          //  ----------------------------------- 
  33          #include "types.h"
  34          #include "OSDCtrl.h"
  35          #include "BusCtrl.h"
  36          
  37          #include "Font.h"
  38          
  39          //  ------------------------------------
  40          //      Macro Definitions
  41          //  ------------------------------------ 
  42          #define WriteByteOSD(b, c)      PCT_WriteAsicByte(0, DVC_PG2, b, c)
  43          #define ReadByteOSD(a)        PCT_ReadAsicByte(0, DVC_PG2, a)
  44          #define ReadOSDMemWr()        PCT_ReadAsicByte(0, DVC_PG2,0x0A)
  45          #define ReadOSDBufWr()        PCT_ReadAsicByte(0, DVC_PG2,0x04)
  46          
  47          
  48          //  ------------------------------------
  49          //      Type Definitions
  50          //  ------------------------------------
  51          
  52          
  53          //  ------------------------------------
  54          //      Variables Definitions
C51 COMPILER V9.50a   OSDCTRL                                                              12/04/2018 12:27:03 PAGE 2   

  55          //  ------------------------------------
  56          #if 1
  57            U8 bdata bitdat;
  58          
  59            sbit DAT_BIT0 = bitdat^0;
  60            sbit DAT_BIT1 = bitdat^1;
  61            sbit DAT_BIT2 = bitdat^2;
  62            sbit DAT_BIT3 = bitdat^3;
  63            sbit DAT_BIT4 = bitdat^4;
  64            sbit DAT_BIT5 = bitdat^5;
  65            sbit DAT_BIT6 = bitdat^6;
  66            sbit DAT_BIT7 = bitdat^7;
  67          #endif
  68            data U8 foreColor;
  69            data U8 backColor;
  70          
  71          
  72          //  ------------------------------------
  73          //      Function Prototypes
  74          //  ------------------------------------
  75          
  76          
  77          
  78          // ===========================================================================
  79          //                      Parallel function description
  80          // ===========================================================================
  81          //
  82          // Set Foreground Color range:0-63
  83          //
  84          void PCT_PreSetForegroundColor(U8 _color)
  85          {
  86   1        foreColor = _color;
  87   1        //printf("=== Fore Color = %bx === \n", foreColor);
  88   1      }
  89          
  90          // ===========================================================================
  91          //
  92          // Set Foreground Color range:0-63
  93          //
  94          void PCT_PreSetBackgroundColor(U8 _color)
  95          {
  96   1        backColor = _color;
  97   1        //printf("=== Back Color = %bx === \n", backColor);
  98   1      }
  99          
 100          // ===========================================================================
 101          //
 102          // Set OSD Index Color Table  
 103          //
 104          void PCT_SetOSDColor(U8 _pth, U8 _col_num, U8 _y, U8 _cb, U8 _cr)
 105          {
 106   1        WriteByteOSD(0x0b, _y);           //... Y
 107   1        WriteByteOSD(0x0c, _cb);          //... Cb
 108   1        WriteByteOSD(0x0d, _cr);          //... Cr
 109   1        ifBitSet(_pth,PTH_X)
 110   1          WriteByteOSD(0x0e, BIT7|_col_num);    //... address
 111   1        else
 112   1          WriteByteOSD(0x0e, BIT7|BIT6|_col_num); //... address
 113   1      }
 114          
 115          // ===========================================================================
 116          //
C51 COMPILER V9.50a   OSDCTRL                                                              12/04/2018 12:27:03 PAGE 3   

 117          //    
 118          //
 119          void PCT_InitOSDColor(void)
 120          {
 121   1        WriteByteOSD(0x1F, 0xC0);//<William-960820>blink DELAY2Sec
 122   1        WriteByteOSD(0x0F, 0x0C);
 123   1        PCT_SetOSDColor(PTH_Y, OSD_COL_RED, 0x4c,0x54,0xff);
 124   1        PCT_SetOSDColor(PTH_Y, OSD_COL_GRN, 76, 84, 74);
 125   1        PCT_SetOSDColor(PTH_Y, OSD_COL_BLU, 0x1d,0xff,0x6b);
 126   1      
 127   1        PCT_SetOSDColor(PTH_X, OSD_COL_BLK, 0x00,0x80,0x80);
 128   1        PCT_SetOSDColor(PTH_X, OSD_COL_RED, 0x4c,0x54,0xff);
 129   1        PCT_SetOSDColor(PTH_X, OSD_COL_GRN, 0x4B, 0x55, 0x4A);
 130   1        PCT_SetOSDColor(PTH_X, OSD_COL_BLU, 0x1d,0xff,0x6b);
 131   1        PCT_SetOSDColor(PTH_X, OSD_COL_100WHT,0xf0,0x80,0x80);
 132   1        PCT_SetOSDColor(PTH_X, OSD_COL_75WHT, 0xc0,0x80,0x80);
 133   1        PCT_SetOSDColor(PTH_X, OSD_COL_50WHT, 0x7f,0x80,0x80);
 134   1        PCT_SetOSDColor(PTH_X, OSD_COL_25WHT, 0x3f,0x80,0x80);
 135   1        PCT_SetOSDColor(PTH_X, OSD_COL_ORNG, 0x95,0x4f,0xb5);
 136   1        PCT_SetOSDColor(PTH_X, OSD_COL_CYN, 0xb2,0xaa,0x00);
 137   1        PCT_SetOSDColor(PTH_X, OSD_COL_MGN, 0x69,0xd4,0xea);
 138   1        PCT_SetOSDColor(PTH_X, OSD_COL_OCN, 0x61,0xb5,0x3a);
 139   1        PCT_SetOSDColor(PTH_X, OSD_COL_YLW, 0xE1, 0x00, 0x94);
 140   1        PCT_SetOSDColor(PTH_X, OSD_COL_RED255, 0x4c,0x54,0xff);
 141   1      
 142   1        backColor=0;
 143   1        foreColor=0;
 144   1      }
 145          
 146          // ===========================================================================
 147          //
 148          //  Setting Page for Draw OSD 
 149          //
 150          void PCT_SetOSDDrawPage(U8 _page)
 151          {
 152   1        _page = (_page<<2) | (ReadByteOSD(0x0A)&0xC3);
 153   1        WriteByteOSD(0x0A, _page);
 154   1      }
 155          
 156          // ===========================================================================
 157          //
 158          //  Enable OSD Page 0:OFF 1-6:Page 1-6 ON 
 159          //
 160          void PCT_EnShowOSDPage(U8 _page)
 161          {
 162   1        if(_page == WRPHY_PAGE0) {
 163   2          _page = (_page&0x07)<<4|(ReadByteOSD(0x0F)&0x0F);
 164   2          WriteByteOSD(0x0F, SetBit(_page, BIT1));
 165   2        } else {
 166   2          _page = (_page&0x07)<<4|(ReadByteOSD(0x0F)&0x0F);
 167   2          WriteByteOSD(0x0F, SetBit(_page, BIT3));
 168   2        }
 169   1      }
 170          
 171          // ===========================================================================
 172          //
 173          //  Disable OSD Page Path X
 174          //
 175          void PCT_DisShowOSDPage(U8 _bit)
 176          {
 177   1        register dat;
 178   1        dat = (ReadByteOSD(0x0F)&0x0F);
C51 COMPILER V9.50a   OSDCTRL                                                              12/04/2018 12:27:03 PAGE 4   

 179   1        WriteByteOSD(0x0F, ClearBit(dat, _bit));
 180   1      }
 181          
 182          // ===========================================================================
 183          //
 184          // Full Color on OSD of X Channel 
 185          // _posx  : Start point for Horizontal (unit = 8 Dots)
 186          // _posy  : Start point for Vertical   (unit = 8 Dots)
 187          //
 188          void PCT_FullColorOnOSD(U8 _posx, U16 _posy, U8 _wide, U16 _high)
 189          {
 190   1        WriteByteOSD(0x00, backColor);    //... 1st pixel
 191   1        WriteByteOSD(0x01, backColor);    //... 2nd pixel
 192   1        WriteByteOSD(0x02, backColor);    //... 3rd pixel
 193   1        WriteByteOSD(0x03, backColor);    //... 4th pixel
 194   1      
 195   1        _posx <<= 1;
 196   1        _posy <<= 3;
 197   1        _wide = _posx+((_wide)<<1)-1;
 198   1        _high = _posy+((_high)<<3)-1;
 199   1      
 200   1        WriteByteOSD(0x05, _posx);
 201   1        WriteByteOSD(0x06, _wide);
 202   1        WriteByteOSD(0x07, _posy&0xff);
 203   1        WriteByteOSD(0x08, _high&0xff);
 204   1        WriteByteOSD(0x09, 0x02|((_posy>>8)<<2)+(_high>>8));  //... ~ even field
 205   1      
 206   1        WriteByteOSD(0x0A, 0xc0|ReadByteOSD(0x0A));     //... acceleration|x path
 207   1        while(ReadOSDMemWr()&BIT7){}  //... wait finishing write for even field
 208   1      }
 209          
 210          void PCT_ClearOSDPageX(U8 _page)
 211          {
 212   1        PCT_SetOSDDrawPage(_page);
 213   1      
 214   1        PCT_PreSetBackgroundColor(OSD_COL_CLR);
 215   1        PCT_FullColorOnOSD(0,0,90,38);  
 216   1      }
 217          
 218          
 219          
 220          
 221          
 222          
 223          // ===========================================================================
 224          //
 225          // Draw 16 Dots to OSD Dtat Buuffer 0-15
 226          //
 227          #if 1
 228          void PCT_WriteOSDDataBufferX(U8 _index, PU8 _dat)
 229          {
 230   1        bitdat = _dat[0];
 231   1        WriteByteOSD(0x00, DAT_BIT7 ? (foreColor) : (backColor));   //... 1st pixel
 232   1        WriteByteOSD(0x01, DAT_BIT6 ? (foreColor) : (backColor));   //... 2nd pixel
 233   1        WriteByteOSD(0x02, DAT_BIT5 ? (foreColor) : (backColor));   //... 3rd pixel
 234   1        WriteByteOSD(0x03, DAT_BIT4 ? (foreColor) : (backColor));   //... 4th pixel
 235   1        WriteByteOSD(0x04, 0x80|_index);      //... write to buffer
 236   1        _index++;
 237   1        
 238   1        WriteByteOSD(0x00, DAT_BIT3 ? (foreColor) : (backColor));   //... 1st pixel
 239   1        WriteByteOSD(0x01, DAT_BIT2 ? (foreColor) : (backColor));   //... 2nd pixel
 240   1        WriteByteOSD(0x02, DAT_BIT1 ? (foreColor) : (backColor));   //... 3rd pixel
C51 COMPILER V9.50a   OSDCTRL                                                              12/04/2018 12:27:03 PAGE 5   

 241   1        WriteByteOSD(0x03, DAT_BIT0 ? (foreColor) : (backColor));   //... 4th pixel
 242   1        WriteByteOSD(0x04, 0x80|_index);      //... write to buffer
 243   1        _index++;
 244   1        
 245   1        bitdat = _dat[1];
 246   1        WriteByteOSD(0x00, DAT_BIT7 ? (foreColor) : (backColor));   //... 1st pixel
 247   1        WriteByteOSD(0x01, DAT_BIT6 ? (foreColor) : (backColor));   //... 2nd pixel
 248   1        WriteByteOSD(0x02, DAT_BIT5 ? (foreColor) : (backColor));   //... 3rd pixel
 249   1        WriteByteOSD(0x03, DAT_BIT4 ? (foreColor) : (backColor));   //... 4th pixel
 250   1        WriteByteOSD(0x04, 0x80|_index);      //... write to buffer
 251   1        _index++;
 252   1        
 253   1        WriteByteOSD(0x00, DAT_BIT3 ? (foreColor) : (backColor));   //... 1st pixel
 254   1        WriteByteOSD(0x01, DAT_BIT2 ? (foreColor) : (backColor));   //... 2nd pixel
 255   1        WriteByteOSD(0x02, DAT_BIT1 ? (foreColor) : (backColor));   //... 3rd pixel
 256   1        WriteByteOSD(0x03, DAT_BIT0 ? (foreColor) : (backColor));   //... 4th pixel
 257   1        WriteByteOSD(0x04, 0x80|_index);      //... write to buffer
 258   1      }
 259          #endif
 260          // ===========================================================================
 261          //
 262          // Draw 16x16 Dots for word, tatal 4 words is 64 x 16 Dots
 263          // _posx  : Start point for Horizontal (unit = 8 Dots)
 264          // _posy  : Start point for Vertical   (unit = 8 Dots)
 265          // _len   : 1-4: 1-4 words
 266          // _index : Ascii code for string
 267          //
 268          #if 1
 269          void PCT_WriteOSDFntX(U8 _posx, U16 _posy, U8 _len, PU8 _indx)  //... only one _pth at once
 270          {
 271   1        data U8 i,j,posx;
 272   1        PCHAR charPtr[4]; 
 273   1        
 274   1        _posx <<= 1;
 275   1        posx = _posx = _posx + BOX_OFFSET_X;    
 276   1        _posy <<= 3;
 277   1        _posy += BOX_OFFSET_Y;
 278   1        charPtr[0] = FONT_TABLE + (_indx[0]*32);
 279   1        charPtr[1] = FONT_TABLE + (_indx[1]*32);
 280   1        charPtr[2] = FONT_TABLE + (_indx[2]*32);
 281   1        charPtr[3] = FONT_TABLE + (_indx[3]*32);
 282   1        
 283   1        if(_len>4) _len=4;
 284   1        for(i=0; i<32; i+=2) {
 285   2          for(j=0; j<_len; j++) PCT_WriteOSDDataBufferX( j<<2, charPtr[j]+i);
 286   2          WriteByteOSD(0x05, posx);
 287   2          WriteByteOSD(0x07, _posy&0xff);
 288   2      
 289   2          WriteByteOSD(0x09, (((_len*4-1)<<4)|((_posy)>>8)<<2));      //... start: OSD_POS_V_ODD, end: OSD_POS_V_ODD
 290   2          WriteByteOSD(0x0A, 0x80|(ReadByteOSD(0x0A)&0x3F));        //... x path
 291   2          while(ReadOSDMemWr()&BIT7);                   //... wait finishing write for odd field
 292   2      
 293   2          WriteByteOSD(0x09, (((_len*4-1)<<4)|((_posy)>>8)<<2)|0x08);   //... start: OSD_POS_V_ODD, end: OSD_POS_V_
             -ODD
 294   2          WriteByteOSD(0x0A, 0x80|(ReadByteOSD(0x0A)&0x3F));        //... x path
 295   2          while(ReadOSDMemWr()&BIT7);                   //... wait finishing write for odd field
 296   2      
 297   2          _posy++;
 298   2        }
 299   1      }
 300          #endif
 301          // ===========================================================================
C51 COMPILER V9.50a   OSDCTRL                                                              12/04/2018 12:27:03 PAGE 6   

 302          //
 303          // Clear 16x16 Dots for word, tatal N words
 304          // _posx  : Start point for Horizontal (unit = 8 Dots)
 305          // _posy  : Start point for Vertical   (unit = 8 Dots)
 306          // _len   : 1-4: 1-4 words
 307          //
 308          void PCT_ClearWordsPathX(U8 _posx, U16 _posy, U8 _len)  
 309          {
 310   1        register U8   wide;
 311   1        register U16 high;
 312   1      
 313   1        WriteByteOSD(0x00, backColor);    //... 1st pixel
 314   1        WriteByteOSD(0x01, backColor);    //... 2nd pixel
 315   1        WriteByteOSD(0x02, backColor);    //... 3rd pixel
 316   1        WriteByteOSD(0x03, backColor);    //... 4th pixel
 317   1      
 318   1        _posx <<= 1;
 319   1        _posx += BOX_OFFSET_X;    
 320   1        _posy <<= 3;
 321   1        _posy += BOX_OFFSET_Y;
 322   1      
 323   1        wide = _posx+(_len<<2)-1;
 324   1        high = _posy+15;
 325   1      
 326   1        WriteByteOSD(0x05, _posx);
 327   1        WriteByteOSD(0x06, wide);
 328   1        WriteByteOSD(0x07, _posy&0xff);
 329   1        WriteByteOSD(0x08, high&0xff);
 330   1        WriteByteOSD(0x09, 0x02|((_posy>>8)<<2)+(high>>8)); //... ~ even field
 331   1      
 332   1        WriteByteOSD(0x0A, 0xc0|ReadByteOSD(0x0A));     //... acceleration|x path
 333   1        while(ReadOSDMemWr()&BIT7){}  //... wait finishing write for even field
 334   1      }
 335          
 336          // ===========================================================================
 337          //
 338          // Draw 16 Dots to OSD Dtat Buuffer 0-15
 339          //
 340          #if 1
 341          void PCT_WriteOSDDataBufferY(U8 _index, PU8 _dat)
 342          {
 343   1        bitdat = _dat[0];
 344   1        WriteByteOSD(0x00, ((DAT_BIT7 ? (foreColor) : (backColor))<<4)|(DAT_BIT6 ? (foreColor) : (backColor)));   
             -//... 1st 2nd pixel
 345   1        WriteByteOSD(0x01, ((DAT_BIT5 ? (foreColor) : (backColor))<<4)|(DAT_BIT4 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 346   1        WriteByteOSD(0x02, ((DAT_BIT3 ? (foreColor) : (backColor))<<4)|(DAT_BIT2 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 347   1        WriteByteOSD(0x03, ((DAT_BIT1 ? (foreColor) : (backColor))<<4)|(DAT_BIT0 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 348   1        WriteByteOSD(0x04, 0x80|_index++);      //... write to buffer
 349   1        
 350   1        bitdat = _dat[1];
 351   1        WriteByteOSD(0x00, ((DAT_BIT7 ? (foreColor) : (backColor))<<4)|(DAT_BIT6 ? (foreColor) : (backColor)));   
             -//... 1st 2nd pixel
 352   1        WriteByteOSD(0x01, ((DAT_BIT5 ? (foreColor) : (backColor))<<4)|(DAT_BIT4 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 353   1        WriteByteOSD(0x02, ((DAT_BIT3 ? (foreColor) : (backColor))<<4)|(DAT_BIT2 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 354   1        WriteByteOSD(0x03, ((DAT_BIT1 ? (foreColor) : (backColor))<<4)|(DAT_BIT0 ? (foreColor) : (backColor)));   
             -//... 3rd 4th pixel
 355   1        WriteByteOSD(0x04, 0x80|_index++);      //... write to buffer
C51 COMPILER V9.50a   OSDCTRL                                                              12/04/2018 12:27:03 PAGE 7   

 356   1        
 357   1      }
 358          #endif
 359          // ===========================================================================
 360          //
 361          // Draw 16x16 Dots for word, tatal 8 words is 128 x 16 Dots
 362          // _posx  : Start point for Horizontal (unit = 8 Dots)
 363          // _posy  : Start point for Vertical   (unit = 8 Dots)
 364          // _len   : 1-4: 1-8 words
 365          // _index : Ascii code for string
 366          //
 367          #if 1
 368          void PCT_WriteOSDFntY(U8 _posx, U16 _posy, U8 _len, PU8 _indx)  //... only one _pth at once
 369          {
 370   1        data U8 i,j;
 371   1        PCHAR charPtr[8]; 
 372   1        
 373   1        _posx <<= 1;
 374   1        _posx += YFONT_OFFSET_X;
 375   1        _posy <<= 3;
 376   1        _posy += YFONT_OFFSET_Y;
 377   1      
 378   1        if(_len>8) _len=8;
 379   1        for(i=0; i<_len; i++)
 380   1          charPtr[i] = FONT_TABLE + (_indx[i]*32);
 381   1        
 382   1        for(i=0; i<32; i+=2) {
 383   2          for(j=0; j<_len; j++) PCT_WriteOSDDataBufferY( j<<1, charPtr[j]+i);
 384   2          WriteByteOSD(0x05, _posx);
 385   2          WriteByteOSD(0x07, _posy&0xff);
 386   2          WriteByteOSD(0x09, (((_len<<5)-0x10)|((_posy)>>8)<<2));     //... start: OSD_POS_V_ODD, end: OSD_POS_V_ODD
 387   2          WriteByteOSD(0x0A, 0x80|(ReadByteOSD(0x0A)&0x3F));        //... x path
 388   2          while(ReadOSDMemWr()&BIT7);             //... wait finishing write for odd field
 389   2          _posy++;
 390   2        }
 391   1      }
 392          #endif
 393          //==================================================================================
 394          //
 395          // Show String on OSD
 396          //
 397          #if 1
 398          void PCT_ShowOSDString(U8 _path, U8 _addrx, U8 _addry, PCHAR _strptr)
 399          {
 400   1        register signed char slen;
 401   1      
 402   1        slen = strlen(_strptr);
 403   1        if(slen<0) return; 
 404   1        ifBitSet(_path, PTH_X) {
 405   2          do{
 406   3            PCT_WriteOSDFntX(_addrx, _addry, (U8) slen, _strptr);
 407   3            slen -= 4;
 408   3            _strptr+=4;
 409   3            _addrx+=8;
 410   3          }while(slen>0);
 411   2        } else {
 412   2          do{
 413   3            PCT_WriteOSDFntY(_addrx, _addry, (U8) slen, _strptr);
 414   3            slen -= 8;
 415   3            _strptr+=8;
 416   3            _addrx+=8;
 417   3          }while(slen>0);
C51 COMPILER V9.50a   OSDCTRL                                                              12/04/2018 12:27:03 PAGE 8   

 418   2        }
 419   1        PTC_SwitchToI2CMode();
 420   1      }
 421          #endif
 422          //==================================================================================
 423          //
 424          //
 425          //
 426          
 427          
 428          // ===========================================================================
 429          // END of File 
 430          // ===========================================================================


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2586    ----
   CONSTANT SIZE    =   3744    ----
   XDATA SIZE       =   ----      88
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
