C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE TW28XX_VIDEO
OBJECT MODULE PLACED IN .\OBJ\TW28xx_Video.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE TW28xx_Video.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\OB
                    -J\TW28xx_Video.lst) TABS(2) OBJECT(.\OBJ\TW28xx_Video.obj)

line level    source

   1          //  **************************************************************************
   2          //
   3          //       Copyright (c) 1992-2006 Professonal Computer Technology Co., Ltd
   4          //
   5          //      All rights are reserved. Reproduction in whole or in parts is
   6          //  prohibited without the prior written consent of the copyright owner.
   7          //  --------------------------------------------------------------------------
   8          //
   9          //  Module: TW28xx_Video.C
  10          //
  11          //  Purpose: Implementation of TW28xx Video.
  12          //
  13          //  Version: 0.01                                   2006/12/11 08:22¤U¤È
  14          //
  15          //  Compiler: Keil 8051 C Compiler v7.2
  16          //
  17          //  Reference:
  18          //
  19          //
  20          //
  21          //  --------------------------------------------------------------------------
  22          //  Modification:
  23          //
  24          //  R0.01 2006/12/11 08:22¤U¤È Phoenix Chuang
  25          //  Reason:
  26          //    1. Original.
  27          //  Solution:
  28          //  
  29          //  **************************************************************************
  30          //  -----------------------------------
  31          //      Header Files
  32          //  ----------------------------------- 
  33          #include "types.h"
  34          #include "TW28xx_Video.h"
  35          #include "BusCtrl.h"
  36          #include "CommandShell.h"
  37          #include "Win_Table.h"
  38          #include "Timer.h"//andy 20100209 add
  39          #include "TW2835_Init.h"
  40          #include "Main.h"
  41          
  42          //  ------------------------------------
  43          //      Macro Definitions
  44          //  ------------------------------------ 
  45          #define H_FILTER  0x0000
  46          
  47          //  ------------------------------------
  48          //      Type Definitions
  49          //  ------------------------------------
  50          
  51          
  52          //  ------------------------------------
  53          //      Variables Definitions
  54          //  ------------------------------------
C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 2   

  55          code U16 XWinAttr_RegAddr[] = {0x0111, 0x0119, 0x0121, 0x0129, 
  56                           0x0114, 0x011C, 0x0124, 0x012C };
  57          
  58          code U16 XWinPOP_RegAddr[]  = {0x0110, 0x0118, 0x0120, 0x0128, 
  59                           0x0113, 0x011B, 0x0123, 0x012B };
  60          
  61          code U16 YWinAttr_RegAddr[] = {0x0161, 0x0164, 0x0167, 0x016A};
  62          
  63          
  64          extern BYTE xdata Original_selwintype;//Kane @HS 2007 0724 Ver3.4
  65          //  ------------------------------------
  66          //      Function Prototypes
  67          //  ------------------------------------
  68          
  69          
  70          
  71          // ===========================================================================
  72          //                      Parallel function description
  73          // ===========================================================================
  74          //
  75          // Auto Detectation Video Format 
  76          //
  77          U8 PCT_DetectVideoFormat(U8 _ch)
  78          {
  79   1        register U8 tmpSta;
  80   1      //  int _delay;
  81   1        // Waitting Color Lock
  82   1        //Kane Modified>>>>
  83   1        #if 1
  84   1        tmpSta = 0; 
  85   1        
  86   1        if( (TW28_ReadByte(0, SENSORCHANNEL<<4)&0x0F) == 0x0F) 
  87   1          tmpSta = TW28_ReadByte(0, _ch << 4);
  88   1        
  89   1          
  90   1        if(tmpSta == 0)
  91   1          return NONE_SYSTEM;
  92   1        tmpSta &= 0xE0;
  93   1        tmpSta >>= 5;
  94   1        return (tmpSta>3)  ? NTSC: PAL; 
  95   1        #else
              //  DELAY_FOR(150);
                tmpSta = TW28_ReadByte(0, _ch << 4);
                if( 0x0F != (tmpSta & 0x0F))
                  return DEF_SYSTEM;
                tmpSta &= 0xE0;
                tmpSta >>= 5;
                return (tmpSta>3)  ? NTSC: PAL; 
                #endif//if 0
 104   1        //Kane Modified<<<<
 105   1      }
 106          
 107          // ===========================================================================
 108          //
 109          // Setting Video Format 
 110          //
 111          #if 0
              void PCT_SetVideoFormat(U8 _dvc, U8 _ch, U8 _fmat)
              {
                register U8 tmpSta, addr;
                
                _dvc = 0;
C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 3   

                addr = _ch << 4 | 0x01;
                tmpSta = TW28_ReadByte(0, addr);
                //Kane modified>>>>
                //tmpSta &= ~VIDEO_ADDR;
                tmpSta &= 0x8F;
                // Kane modified<<<<
                tmpSta |= _fmat;
                TW28_WriteByte(0, addr, tmpSta);
              }
              #endif
 127          // ===========================================================================
 128          //
 129          // About X channel Video Mixing Control 
 130          //
 131          
 132          // Video Scale Setting
 133          void PCT_SetChanelScale(U8 _ch, WRITE_REG_DATA *datptr)
 134          {
 135   1        code U8 ScaleRgeAddr[]={0x83,0x84,0x81,0x82,
 136   1                    0x93,0x94,0x91,0x92,
 137   1                    0xA3,0xA4,0xA1,0xA2,
 138   1                    0xB3,0xB4,0xB1,0xB2,
 139   1        };
 140   1        U8  *addrptr;
 141   1        register U16 value;
 142   1      
 143   1        #define HB GETHBYTE(value)
 144   1        #define LB GETLBYTE(value)
 145   1        
 146   1        addrptr = ScaleRgeAddr+_ch*4;
 147   1        value = datptr->addr;
 148   1        if(value != 0xFFFF) value += H_FILTER;
 149   1        TW28_WriteByte(0, *addrptr++, HB);
 150   1        TW28_WriteByte(0, *addrptr++, LB);
 151   1        datptr++;
 152   1        value = datptr->addr;
 153   1        TW28_WriteByte(0, *addrptr++, HB);
 154   1        TW28_WriteByte(0, *addrptr++, LB);
 155   1      }
 156          
 157          // Video scale Check 
 158          void PCT_SetVideoHDelay(U8 _typ, PU8 _winch, PU8 _cattr)
 159          {
 160   1        register U8 hdelay;
 161   1      //Kane @HS 2007 0806 Ver3.4>>>>
 162   1      //  if(Original_selwintype == _typ )//Kane @HS 2007 0724 Ver3.4
 163   1      //    return;
 164   1      ////Kane @HS 2007 0806 Ver3.4<<<<
 165   1      
 166   1      
 167   1        switch(_typ){
 168   2          case VMIX_TYPE_N11:
 169   2          case VMIX_TYPE_P11:
 170   2          //Kane @HS 2007 0806 Ver3.4>>>> 
 171   2            //if(Original_selwintype == _typ)//Kane @HS 2007 0724 Ver3.4
 172   2            //break;
 173   2          //Kane @HS 2007 0806 Ver3.4<<<<
 174   2          
 175   2            hdelay = 0x08|SYSTYPE;
 176   2            hdelay |= (_cattr[0]&0x01)<<1;
 177   2            if(_winch[0]&0x01)
 178   2              hdelay |= WIN_RIGHT;  // Signal Channel 1,3
C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 4   

 179   2            else
 180   2              hdelay |= WIN_LEFT;   // Signal Channel 0,2
 181   2      
 182   2            #if 1
 183   2        //    if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 184   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,25);
 185   2      
 186   2            #else
                    if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
                      TW28_WriteByte(0, (_winch[0]<<4)|0x02,Video_HDelay[hdelay]);
              
                    #endif
 191   2      
 192   2            break;
 193   2      
 194   2          case VMIX_TYPE_N21://andy
 195   2          case VMIX_TYPE_P21:
 196   2            #if 0
                    // Type N,L,R
                    hdelay = 0x08|WIN_RIGHT|SYSTYPE;  // WIN_RIGHT for Y Channel LEFT
                    hdelay |= (_cattr[0]&0x01)<<1;
                    if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
                      TW28_WriteByte(0, (_winch[0]<<4)|0x02,Video_HDelay[hdelay]);
                    // LEFT 
                    hdelay = 0x08|WIN_LEFT|SYSTYPE; // WIN_RIGHT for Y Channel LEFT
                    hdelay |= (_cattr[1]&0x01)<<1;
                    if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
                      TW28_WriteByte(0, (_winch[1]<<4)|0x02,Video_HDelay[hdelay]);
              
                    #endif
 209   2            break;
 210   2      
 211   2          case VMIX_TYPE_N22:
 212   2          case VMIX_TYPE_P22:
 213   2            // LEFT 
 214   2            hdelay = WIN_LEFT|SYSTYPE;
 215   2            hdelay |= (_cattr[0]&0x01)<<1;
 216   2            //if(TW28_ReadByte(0,( _winch[0]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 217   2              //TW28_WriteByte(0, (_winch[0]<<4)|0x02,Video_HDelay[hdelay]);
 218   2                            //TW28_WriteByte(0, (_winch[0]<<4)|0x02,10+30);
 219   2                                    #ifdef black_boundary
                                            //TW28_WriteByte(0, (_winch[0]<<4)|0x02,10+15+1+1+2+3+5);  ///slaver screen
                                            TW28_WriteByte(0, (_winch[0]<<4)|0x02,10+15+1+1);  ///slaver screen
                              #else
 223   2                                    TW28_WriteByte(0, (_winch[0]<<4)|0x02,25+2);  ///slaver screen
 224   2                      #endif  
 225   2            
 226   2            // RIGHT
 227   2            hdelay = WIN_RIGHT|SYSTYPE;
 228   2            hdelay |= (_cattr[1]&0x01)<<1;
 229   2            //if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 230   2              //TW28_WriteByte(0, (_winch[1]<<4)|0x02,Video_HDelay[hdelay]);
 231   2              //TW28_WriteByte(0, (_winch[1]<<4)|0x02,20);
 232   2        //      TW28_WriteByte(0, (_winch[1]<<4)|0x02,25);       //main screen
 233   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,25);       //main screen
 234   2      
 235   2            break;
 236   2            
 237   2          case VMIX_TYPE_N31:
 238   2          case VMIX_TYPE_P31:
 239   2            // Type N,L,R
 240   2            hdelay = 0x08|WIN_RIGHT|SYSTYPE;  // WIN_RIGHT for Y Channel LEFT
C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 5   

 241   2            hdelay |= (_cattr[0]&0x01)<<1;
 242   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 243   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,Video_HDelay[hdelay]);
 244   2            // LEFT 
 245   2            hdelay = WIN_LEFT|SYSTYPE;
 246   2            hdelay |= (_cattr[1]&0x01)<<1;
 247   2            if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 248   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,Video_HDelay[hdelay]);
 249   2            // RIGHT
 250   2            hdelay = WIN_RIGHT|SYSTYPE;
 251   2            hdelay |= (_cattr[2]&0x01)<<1;
 252   2            if(TW28_ReadByte(0, (_winch[2]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 253   2              TW28_WriteByte(0, (_winch[2]<<4)|0x02,Video_HDelay[hdelay]);
 254   2            break;
 255   2      
 256   2          case VMIX_TYPE_N32:
 257   2          case VMIX_TYPE_P32:
 258   2            break;
 259   2      
 260   2          case VMIX_TYPE_N33:
 261   2          case VMIX_TYPE_P33:
 262   2            // Type L,R,R
 263   2            // LEFT 
 264   2            hdelay = WIN_LEFT|SYSTYPE;
 265   2            hdelay |= (_cattr[0]&0x01)<<1;
 266   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 267   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,Video_HDelay[hdelay]);
 268   2            // RIGHT
 269   2            hdelay = WIN_RIGHT|SYSTYPE;
 270   2            hdelay |= (_cattr[1]&0x01)<<1;
 271   2            if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 272   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,Video_HDelay[hdelay]);
 273   2            // RIGHT
 274   2            hdelay = WIN_RIGHT|SYSTYPE;
 275   2            hdelay |= (_cattr[2]&0x01)<<1;
 276   2            if(TW28_ReadByte(0,( _winch[2]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 277   2            TW28_WriteByte(0, (_winch[2]<<4)|0x02,Video_HDelay[hdelay]);
 278   2            break;
 279   2      
 280   2          case VMIX_TYPE_N34:
 281   2          case VMIX_TYPE_P34:
 282   2            // Type L,R,L
 283   2            // LEFT 
 284   2            hdelay = WIN_LEFT|SYSTYPE;
 285   2            hdelay |= (_cattr[0]&0x01)<<1;
 286   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 287   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,Video_HDelay[hdelay]);
 288   2            // RIGHT
 289   2            hdelay = WIN_RIGHT|SYSTYPE;
 290   2            hdelay |= (_cattr[1]&0x01)<<1;
 291   2            if(TW28_ReadByte(0, (_winch[1]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 292   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,Video_HDelay[hdelay]);
 293   2            //Left
 294   2            hdelay = WIN_LEFT|SYSTYPE;
 295   2            hdelay |= (_cattr[2]&0x01)<<1;
 296   2            if(TW28_ReadByte(0, (_winch[2]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 297   2              TW28_WriteByte(0, (_winch[2]<<4)|0x02,Video_HDelay[hdelay]);
 298   2            break;
 299   2            
 300   2          case VMIX_TYPE_N41:
 301   2          case VMIX_TYPE_P41:
 302   2            // Type L,R,L,R
C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 6   

 303   2            // LEFT 
 304   2            hdelay = WIN_LEFT|SYSTYPE;
 305   2            hdelay |= (_cattr[0]&0x01)<<1;
 306   2            if(TW28_ReadByte(0, (_winch[0]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 307   2              TW28_WriteByte(0, (_winch[0]<<4)|0x02,Video_HDelay[hdelay]);
 308   2            // RIGHT
 309   2            hdelay = WIN_RIGHT|SYSTYPE;
 310   2            hdelay |= (_cattr[1]&0x01)<<1;
 311   2            if(TW28_ReadByte(0,( _winch[1]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 312   2              TW28_WriteByte(0, (_winch[1]<<4)|0x02,Video_HDelay[hdelay]);
 313   2            // Left
 314   2            hdelay = WIN_LEFT|SYSTYPE;
 315   2            hdelay |= (_cattr[2]&0x01)<<1;
 316   2            if(TW28_ReadByte(0, (_winch[2]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 317   2              TW28_WriteByte(0, (_winch[2]<<4)|0x02,Video_HDelay[hdelay]);
 318   2            // RIGHT
 319   2            hdelay = WIN_RIGHT|SYSTYPE;
 320   2            hdelay |= (_cattr[3]&0x01)<<1;
 321   2            if(TW28_ReadByte(0, (_winch[3]<<4)|0x02) != Video_HDelay[hdelay])//Kane @HS 2007 0808 Ver3.4
 322   2              TW28_WriteByte(0, (_winch[3]<<4)|0x02,Video_HDelay[hdelay]);
 323   2            break;
 324   2      
 325   2          default :
 326   2            break;
 327   2        }
 328   1      }
 329          
 330          // X Channel Video Mixing Control
 331          void PCT_SetXVideoMixing(U8 _typ, PU8 _winch)
 332          {
 333   1        WRITE_REG_DATA *wregptr;
 334   1      
 335   1      #if 1  //ryan@20150302
 336   1        TW28_WriteByte(1, 0x10, (_winch[0]&0x03)|0x80);
 337   1        TW28_WriteByte(1, 0x18, (_winch[1]&0x03)|0x80);
 338   1        TW28_WriteByte(1, 0x20, (_winch[2]&0x03)|0x80);
 339   1        TW28_WriteByte(1, 0x28, (_winch[3]&0x03)|0x80);
 340   1      #else
                TW28_WriteByte(1, 0x10, (_winch[0]&0x03)|0x80);
                TW28_WriteByte(1, 0x18, (_winch[1]&0x03)|0x80);
                TW28_WriteByte(1, 0x20, (_winch[2]&0x03)|0x80);
                TW28_WriteByte(1, 0x28, (_winch[3]&0x03)|0x80);
              #endif
 346   1      
 347   1      
 348   1        switch(_typ){
 349   2          case VMIX_TYPE_N11:
 350   2          case VMIX_TYPE_P11:
 351   2            //if(Original_selwintype == _typ)//Kane @HS 2007 0724 Ver3.4
 352   2            //break;
 353   2            
 354   2            wregptr = Init_Vido_W1+SYSTYPE*19;
 355   2            PCT_SetChanelScale(_winch[0], wregptr);
 356   2            TW28_WriteSTable(0, wregptr+2);
 357   2            break;
 358   2            
 359   2          case VMIX_TYPE_N21:
 360   2          case VMIX_TYPE_N22:
 361   2          case VMIX_TYPE_P21:
 362   2          case VMIX_TYPE_P22:
 363   2            wregptr = Init_Vido_W2+SYSTYPE*TYPE2_OFSET*2;
 364   2            wregptr += ((_typ&0x0F)-1)*TYPE2_OFSET;
C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 7   

 365   2                          
 366   2        PCT_SetChanelScale(_winch[0], wregptr);
 367   2      //PCT_SetChanelScale(_winch[1], wregptr);           
 368   2        PCT_SetChanelScale(_winch[1], wregptr+2);  //ryan
 369   2            //TW28_WriteSTable(0, wregptr+2);
 370   2            TW28_WriteSTable(0, wregptr+2+2); //ryan  
 371   2            break;
 372   2            
 373   2          case VMIX_TYPE_N31:
 374   2          case VMIX_TYPE_N32:
 375   2          case VMIX_TYPE_N33:
 376   2          case VMIX_TYPE_N34:
 377   2          case VMIX_TYPE_P31:
 378   2          case VMIX_TYPE_P32:
 379   2          case VMIX_TYPE_P33:
 380   2          case VMIX_TYPE_P34:
 381   2            wregptr = Init_Vido_W3+SYSTYPE*TYPE3_OFSET*4;
 382   2            wregptr += ((_typ&0x0F)-1)*TYPE3_OFSET;
 383   2            
 384   2            PCT_SetChanelScale(_winch[0], wregptr+0);
 385   2            PCT_SetChanelScale(_winch[1], wregptr+2);
 386   2            PCT_SetChanelScale(_winch[2], wregptr+4);
 387   2            TW28_WriteSTable(0, wregptr+6);
 388   2            break;
 389   2            
 390   2          case VMIX_TYPE_N41:
 391   2          case VMIX_TYPE_P41:
 392   2            wregptr = Init_Vido_W4+SYSTYPE*19;
 393   2            PCT_SetChanelScale(_winch[0], wregptr);
 394   2            PCT_SetChanelScale(_winch[1], wregptr);
 395   2            PCT_SetChanelScale(_winch[2], wregptr);
 396   2            PCT_SetChanelScale(_winch[3], wregptr);
 397   2            TW28_WriteSTable(0, wregptr+2);
 398   2            break;
 399   2      
 400   2          default :
 401   2            break;
 402   2        }
 403   1      }
 404          
 405          // ===========================================================================
 406          //
 407          // About Y channel Video Mixing Control 
 408          //
 409          void PCT_SetYVideoMixing(U8 _typ)
 410          {
 411   1        TW28_WriteSTable(0, Init_Vido_Y + _typ * YTYPE_OFSET);
 412   1      }
 413          
 414          // About Y channel Video Hdelay 
 415          void PCT_RecompenseYHdelay (PU8 _chmiro)
 416          {
 417   1        switch(TW28_ReadByte(0x01, 0x6C)){
 418   2        case 0x00:
 419   2          
 420   2          if(TW28_ReadByte(0, 0x02) != Video_HDelay[WIN_LEFT+((_chmiro[0]&BIT0)<<1)+SYSTYPE])//Kane @HS 2007 0808 
             -Ver3.4
 421   2            TW28_WriteByte(0x00, 0x02, Video_HDelay[WIN_LEFT+((_chmiro[0]&BIT0)<<1)+SYSTYPE]);
 422   2          if(TW28_ReadByte(0, 0x12) != Video_HDelay[WIN_RIGHT+((_chmiro[1]&BIT0)<<1)+SYSTYPE])//Kane @HS 2007 0808
             - Ver3.4
 423   2            TW28_WriteByte(0x00, 0x12, Video_HDelay[WIN_RIGHT+((_chmiro[1]&BIT0)<<1)+SYSTYPE]);
 424   2          if(TW28_ReadByte(0, 0x22) != Video_HDelay[WIN_LEFT+((_chmiro[2]&BIT0)<<1)+SYSTYPE])//Kane @HS 2007 0808 
C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 8   

             -Ver3.4
 425   2            TW28_WriteByte(0x00, 0x22, Video_HDelay[WIN_LEFT+((_chmiro[2]&BIT0)<<1)+SYSTYPE]);
 426   2          if(TW28_ReadByte(0, 0x32) != Video_HDelay[WIN_RIGHT+((_chmiro[3]&BIT0)<<1)+SYSTYPE])//Kane @HS 2007 0808
             - Ver3.4
 427   2            TW28_WriteByte(0x00, 0x32, Video_HDelay[WIN_RIGHT+((_chmiro[3]&BIT0)<<1)+SYSTYPE]);
 428   2          break;
 429   2      
 430   2        case 0x03:
 431   2          if(TW28_ReadByte(0, 0x02) != Video_HDelay[0x08+((_chmiro[0]&BIT0)<<1)+SYSTYPE])//William @HS 2007 0829 V
             -er3.4
 432   2            TW28_WriteByte(0x00, 0x02, Video_HDelay[0x08+((_chmiro[0]&BIT0)<<1)+SYSTYPE]);
 433   2          break;
 434   2          
 435   2        case 0x0C:
 436   2          if(TW28_ReadByte(0, 0x12) != Video_HDelay[0x08+((_chmiro[1]&BIT0)<<1)+SYSTYPE])//William @HS 2007 0829 V
             -er3.4
 437   2            TW28_WriteByte(0x00, 0x12, Video_HDelay[0x08+((_chmiro[1]&BIT0)<<1)+SYSTYPE]);
 438   2          break;
 439   2          
 440   2        case 0x30:
 441   2          if(TW28_ReadByte(0, 0x22) != Video_HDelay[0x08+((_chmiro[2]&BIT0)<<1)+SYSTYPE])//William @HS 2007 0829 V
             -er3.4
 442   2          TW28_WriteByte(0x00, 0x22, Video_HDelay[0x08+((_chmiro[2]&BIT0)<<1)+SYSTYPE]);
 443   2          break;
 444   2          
 445   2        case 0xC0:
 446   2          if(TW28_ReadByte(0, 0x32) !=Video_HDelay[0x08+((_chmiro[3]&BIT0)<<1)+SYSTYPE])//William @HS 2007 0829 Ve
             -r3.4
 447   2          TW28_WriteByte(0x00, 0x32, Video_HDelay[0x08+((_chmiro[3]&BIT0)<<1)+SYSTYPE]);
 448   2          break;
 449   2        }
 450   1      }
 451          
 452          // ===========================================================================
 453          //
 454          //  TW2835 Video Mixing last Modify for AC & RB
 455          //
 456          //Kane @HS 2007 0808 Ver3.4>>>>
 457          #if 0
              void PCT_VideoLastModify(void)
              {
                register data U8 state=0;
                
                state += (SYSWINLK[0]&0x03);
                state += (SYSWINLK[1]&0x03)<<4;
                state += (SYSWINATTR[0]&BIT0)<<2;
                state += (SYSWINATTR[1]&BIT0)<<6;
              
                switch(state) {
                  case 0x20:
                  case 0x24:
                    TW28_WriteSTable(0, VidoW2_ModifyACNM);
                    break;
              
                  case 0x60:
                  case 0x64:
                    //PCT_CheckSystem();      
                    if((SYSTYPE&BIT0) ==NTSC)//Kane @HS 2007 0813 Cer3.4
                      TW28_WriteSTable(0, VidoW2_ModifyACHM);
                    else
                      TW28_WriteSTable(0, VidoW2_ModifyACHM_PAL);
                    break;
C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 9   

              
                  case 0x13:
                  case 0x53:
                    PCT_WinPOPupCtrl(1);
                    TW28_WriteSTable(0, VidoW2_ModifyRBNM);
                    break;
                  case 0x17:
                  case 0x57:
                    PCT_WinPOPupCtrl(1);
                    TW28_WriteSTable(0, VidoW2_ModifyRBHM);
                    break;
                }
              }
              
              #endif
 496          //Kane @HS 2007 0808 Ver3.4<<<<
 497          // ===========================================================================
 498          //
 499          //  TW2835 Attribute Set about Freeze for X Channel                              
 500          //
 501          void PCT_WinAttrCtrl(U8 _wid, U8 _attrsel, U8 _setval)
 502          {
 503   1        #define PAGE GETHBYTE(XWinAttr_RegAddr[_wid])
 504   1        #define ADDR GETLBYTE(XWinAttr_RegAddr[_wid])
 505   1      
 506   1        register U8 dat;
 507   1      
 508   1        dat = TW28_ReadByte(PAGE, ADDR);
 509   1        _setval ? dat |= _attrsel : (dat &= ~_attrsel);
 510   1        TW28_WriteByte(PAGE, ADDR, dat);
 511   1      }
 512          
 513          // ===========================================================================
 514          //
 515          //  TW2835 Attribute Set about Freeze for X Channel                              
 516          //
 517          //extern void PutsP(BYTE * ptr);
 518          //extern void RS_tx(BYTE tx_buf);
 519          void PCT_WinAttrCtrlY(U8 _wid, U8 _attrsel, U8 _setval)
 520          {
 521   1        #define YPAGE GETHBYTE(YWinAttr_RegAddr[_wid])
 522   1        #define YADDR GETLBYTE(YWinAttr_RegAddr[_wid])
 523   1        register U8 dat;
 524   1        
 525   1        dat = TW28_ReadByte(YPAGE, YADDR);
 526   1        _setval ? dat |= _attrsel : (dat &= ~_attrsel);
 527   1        TW28_WriteByte(YPAGE, YADDR, dat);
 528   1      
 529   1      
 530   1      }
 531          
 532          // ===========================================================================
 533          //
 534          //  TW2835 Attribute Set about Freeze                              
 535          //
 536          #if 0
              void PCT_WinAttrClear(U8 _attrsel)
              {
                #define PAGE GETHBYTE(XWinAttr_RegAddr[_wid])
                #define ADDR GETLBYTE(XWinAttr_RegAddr[_wid])
              
                register  U8 _wid;
C51 COMPILER V9.50a   TW28XX_VIDEO                                                         12/04/2018 12:27:04 PAGE 10  

                register  U8 dat;
              
                for(_wid=0; _wid<8; _wid++) {
                  dat = TW28_ReadByte(PAGE, ADDR);
                  dat &= ~_attrsel;
                  TW28_WriteByte(PAGE, ADDR, dat);
                }
              }
              #endif
 552          
 553          // ===========================================================================
 554          //
 555          // TW2835 Window POP UP 
 556          //
 557          #if 0
              void PCT_WinPOPupCtrl(U8 _wid)
              {
                #define POPPAGE GETHBYTE(XWinPOP_RegAddr[_wid])
                #define POPADDR GETLBYTE(XWinPOP_RegAddr[_wid])
              
                register  U8 dat;
              
                dat = TW28_ReadByte(POPPAGE, POPADDR);
                dat |= BIT6;
                TW28_WriteByte(POPPAGE, POPADDR, dat);
              }
              #endif
 570          // ===========================================================================
 571          //
 572          // 
 573          //
 574          
 575          
 576          // ===========================================================================
 577          // END of File 
 578          // ===========================================================================
 579          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2134    ----
   CONSTANT SIZE    =   1113    ----
   XDATA SIZE       =   ----      34
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
