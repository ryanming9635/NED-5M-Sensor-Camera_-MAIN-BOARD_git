C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\OBJ\Main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Main.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\OBJ\Main.l
                    -st) OBJECT(.\OBJ\Main.obj)

line level    source

   1          //  **************************************************************************
   2          //
   3          //       Copyright (c) 1992-2006 Professonal Computer Technology Co., Ltd
   4          //
   5          //      All rights are reserved. Reproduction in whole or in parts is
   6          //  prohibited without the prior written consent of the copyright owner.
   7          //  --------------------------------------------------------------------------
   8          //
   9          //  Module: Main.C
  10          //
  11          //  Purpose: Implementation of Main.
  12          //
  13          //  Version: 0.01                                   2006/10/22 10:39¤U¤È
  14          //
  15          //  Compiler: Keil 8051 C Compiler v7.2
  16          //
  17          //  Reference:
  18          //
  19          //
  20          //
  21          //  --------------------------------------------------------------------------
  22          //  Modification:
  23          //
  24          //      R0.01 2006/10/22 10:39¤U¤È Phoenix Chuang
  25          //      Reason:
  26          //              1. Original.
  27          //      Solution:
  28          //      
  29          //  **************************************************************************
  30          //      -----------------------------------
  31          //                      Header Files
  32          //      ----------------------------------- 
  33          #include "types.h"
  34          #include "Main.h"
  35          #include "Timer.h"
  36          #include "UART.h"
  37          #include "BusCtrl.h"
  38          #include "TW2835_Init.h"
  39          #include "CommandShell.h"
  40          #include "OSDAction.h"
  41          #include "NED.h"    //add by ryan.
  42          #include "Printf.h"
  43          //#include "SST89x5xxRD2.H"
  44          
  45          //      ------------------------------------
  46          //                      Macro Definitions
  47          //      ------------------------------------ 
  48          
  49          
  50          //      ------------------------------------
  51          //                      Type Definitions
  52          //      ------------------------------------
  53          
  54          
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 2   

  55          //      ------------------------------------
  56          //                      Variables Definitions
  57          //      ------------------------------------
  58                  U16 _delay;
  59                  U8 bdata commFlag;
  60                  sbit comm_chk_flag = commFlag^0;
  61                  sbit osd_chk_flag = commFlag^1;
  62                  COMMAND_BUFFER RScommand;
  63                  bit VlossFlag;
  64          //------------------------------
  65          bit data_chk_flag=0;    //ryan..
  66            
  67          U16 ADC_Val[2]={0,0};
  68          U8 m_current=0;
  69          U8 PIP_flag=0;
  70          U8 Main_f=1;
  71          U8 Small_f=2;
  72          U8 timer2_loop;
  73          U8 boot_flag=1;
  74          extern U8 Temp_timeout;
  75          extern U8 Com_pos;
  76          extern U8 Com_Addr;
  77          extern U8 Com_start;
  78          extern U8 Com_end;
  79          extern U8 Com_run;
  80          extern U8 Monitor_current;
  81          extern U8 Monitor_mode;
  82          extern U8 Monitor_state;
  83          extern U8 Back_f;
  84          extern U8 Shrink_f;
  85          extern  U8 Crop_f;//20150413
  86          extern  U8 DRP_ID[9];
  87          extern BYTE RsRxRp,RsRxWp;
  88          extern U8 Camera_temp0;
  89          extern U8 Camera_temp1;
  90          extern U8 Camera_press0;
  91          extern U8 Camera_press1;
  92          extern U8 Camera_press2;
  93          extern U8 Camera_press3;
  94          extern U16 SC16_busy_flag;
  95          extern  U8 work_flag=0;//20150814
  96           U8 SC16_com_state=0;
  97          extern U8 Camera_ver0;
  98          extern U8 Camera_ver1;
  99          extern U8 Camera_ver2;
 100          
 101          extern U8 get_data_addr;
 102          extern U8 get_data_val;
 103          
 104          extern U8 Camera_flag;
 105          
 106          U16 timerout1=0;  
 107          U16 timerout2=0;  
 108          U16 timerout3=0; 
 109          U16 timerout4=0;
 110          U8 Temp_timeout=1;
 111          U8 CB_flag=0;
 112          U8 CB_timeout=0;
 113          //extern U16 USERTMVAL6;
 114          //-------------------------------
 115          
 116          //data U8 *mode="mode 0\r\n";
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 3   

 117          // char *test="hscom 1 1 ch0:1%1bx ch1:0%1bx ch2:0%1bx ch3:0%1bx\n\r";
 118          
 119          //code U8 *test="hscom 1 1 ch1:12 ch0:02 ch2:02 ch3:03\r\n";  //camA
 120           //char *test="hscom 1 1 ch1:12 ch0:02 ch2:02 ch3:03\n\r";  //camB
 121           //char *test="hscom 2 2 ch0:12 ch1:02 ch2:02 ch3:03\n\r";  //camB+A
 122           //char *test="hscom 2 2 ch2:02 ch3:13 ch0:02 ch1:02\n\r";  //camR+C
 123           
 124          //      ------------------------------------
 125          //                      Function Prototypes
 126          //      ------------------------------------
 127          
 128          
 129          
 130          // ===========================================================================
 131          //                      Parallel function description
 132          // ===========================================================================
 133          //
 134          //      Command Shell for Debug
 135          //
 136          
 137          
 138          void CommandShell(void)
 139          {
 140   1      
 141   1                      data BYTE ch;
 142   1                      static BYTE etx_flag=0;//ryan@20150605
 143   1      
 144   1                      if( RS_RxReady() == true )
 145   1                      {       
 146   2                      
 147   2                      WDTCR|=0x10;
 148   2                                      ch=RS_rx();
 149   2      
 150   2                                                      #ifdef  UART_debug
                                                              printf("%x",(U16)(ch));
                                                              #endif
 153   2                                                                              
 154   2                                      #if 1        
 155   2                                              
 156   2                                              if(ch==STX&&Com_start==0)
 157   2                                              {
 158   3                                              Com_pos=1;
 159   3                                              //RScommand.WritePtr=1;
 160   3                                              SC16_Com[0]=ch; 
 161   3                                                      #ifdef  SC16IS750_DEBUG_PRINT 
                                                              printf("\r\nCom_pos=%x  data=%x",(U16) (Com_pos-1), (U16) SC16_Com[Com_pos-1]);
                                                              printf("\r\nCom_start");
                                                              #endif  
 165   3                                              Com_start=1;
 166   3                                              }
 167   2                                              ///ryan@20150605
 168   2                                      else if((ch==ETX)&&((SC16_Com[1]==0x52)||(SC16_Com[1]==0x53))&&(etx_flag==0)&&Com_pos<=3)
 169   2                                                      {
 170   3                                                      etx_flag=1;
 171   3                                                      SC16_Com[Com_pos]=ch;                                           
 172   3                                                      Com_pos++;
 173   3                                                      }
 174   2                                              else if(ch==ETX&&Com_end==0)
 175   2                                              {
 176   3      
 177   3                                                      SC16_Com[Com_pos]=ch;                                           
 178   3                                                      Com_pos++;
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 4   

 179   3                                                      Com_end=1;
 180   3                                                      etx_flag=0;///end of loop
 181   3                                                      #ifdef  SC16IS750_DEBUG_PRINT 
                                                              printf("\r\nCom_pos=%x  data=%x",(U16) (Com_pos-1), (U16) SC16_Com[Com_pos-1]);
                                                              printf("\r\nCom_end");
                                                              #endif  
 185   3                                              }
 186   2                                              else if(Com_end==1)
 187   2                                              {
 188   3                                                      
 189   3                                              SC16_Com[Com_pos]=ch;   
 190   3      
 191   3                                                      #ifdef  SC16IS750_DEBUG_PRINT 
                                                              printf("\r\nCom_pos=%x  data=%x",(U16) (Com_pos), (U16) SC16_Com[Com_pos]);
                                                              printf("\r\nBCC check..");
                                                              #endif  
 195   3                                                      #ifdef  UART_debug
                                                              printf("*");
                                                              #endif
 198   3                                                              
 199   3                                                      if(SC16_BCC_Check(&SC16_Com[0]))
 200   3                                                      {
 201   4                                                      RScommand.commFlage = true;
 202   4      
 203   4                                                              RScommand.commBuf[0]=SC16_Com[1];  
 204   4                                                              RScommand.commBuf[1]='\0';
 205   4                                                      
 206   4                                                      Com_run=SC16_Com[2];
 207   4                                      
 208   4                                                      RScommand.WritePtr=2;
 209   4                                                      }
 210   3                                                      else    
 211   3                                                      {                                                       
 212   4                                                      ResetCommSell();
 213   4                                                      }
 214   3                      
 215   3                                              }
 216   2                                              else
 217   2                                                      {
 218   3                                                      SC16_Com[Com_pos]=ch;                                           
 219   3                                                      Com_pos++;
 220   3                                                      if(Com_pos>8) ResetCommSell();
 221   3              
 222   3                                                      #ifdef  SC16IS750_DEBUG_PRINT 
                                                              printf("\r\nCom_pos=%x  data=%x",(U16) (Com_pos-1), (U16) SC16_Com[Com_pos-1]);
                                                              #endif  
 225   3                                                      }
 226   2      
 227   2      #else
                              switch(ch) {
                                          #if 1
                                              
                                      case 0x03:
                                              RScommand.commBuf[RScommand.WritePtr] = '\0';
                                              RScommand.commFlage = true;
                                              chkStartCommShell(RScommand.commBuf);
                                              if( comm_chk_flag ) NewLine();
              
                                              #ifdef  SC16IS750_DEBUG_PRINT 
                   printf("\r\nget data=%x %x %x %x",(U16)RScommand.commBuf[0],(U16)RScommand.commBuf[1]\
                     ,(U16)RScommand.commBuf[2],(U16)RScommand.commBuf[3]);
                                              
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 5   

                                              #endif  
                                              
                                              break;
                                              #elif 0
                                              
                                      case '\r':
                                              RScommand.commBuf[RScommand.WritePtr] = '\0';
                                              RScommand.commFlage = true;
                                              chkStartCommShell(RScommand.commBuf);
                                              if( comm_chk_flag ) NewLine();
                                              break;
                                              #endif  
                                      case 0x08:
                                              RScommand.WritePtr--;
                                              break;
              
                                      default:
                                              RScommand.commBuf[RScommand.WritePtr] = ch;
                                              RScommand.WritePtr++;
                                              break;
              
                                              
                              }
                              #endif
 265   2      
 266   2              }
 267   1           else
 268   1              {
 269   2      timerout4=0;
 270   2              }
 271   1           
 272   1      
 273   1           
 274   1      }
 275          
 276          
 277          // ===========================================================================
 278          //
 279          //
 280          //
 281          #if 0
              void NewLine(void)
              {
                      puts("\r\n");                                                               
              }
              #endif
 287          // ===========================================================================
 288          //
 289          //
 290          //
 291          #if 0
              void PutsP(BYTE *ptr)
              {
                      data BYTE ch;
                      
                      while(*ptr!='\0') {
                              ch = *ptr++;
                              RS_tx(ch);
                      }
              }
              #endif
 302          // ===========================================================================
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 6   

 303          //
 304          //      Restart Command Shell 
 305          //
 306          void ResetCommSell(void)
 307          {
 308   1              //if( comm_chk_flag ) PutsP("Debug Program >");
 309   1              
 310   1              Com_start=0;  //ryan..
 311   1              Com_end=0;
 312   1              Com_pos=0;
 313   1              SC16_Com[0]=0;
 314   1              SC16_Com[1]=0;
 315   1              SC16_Com[2]=0;
 316   1              SC16_Com[3]=0;
 317   1              SC16_Com[4]=0;
 318   1              SC16_Com[5]=0;
 319   1              SC16_Com[6]=0;
 320   1              SC16_Com[7]=0;
 321   1              SC16_Com[8]=0;
 322   1              
 323   1              RScommand.WritePtr = 0;
 324   1              RScommand.commFlage = false;
 325   1              RScommand.commBuf[0] = '\0';
 326   1      }
 327          
 328          // ===========================================================================
 329          //
 330          //      Falsh OSD Contril
 331          //
 332          void PCT_FlashOSDCtrl(U8 _on)
 333          {
 334   1              if(_on) osd_chk_flag=false;
 335   1              else osd_chk_flag=true;
 336   1      }
 337          
 338          
 339          // ===========================================================================
 340          //
 341          //      Initial Command Shell 
 342          //
 343          void InitialCommShell(void)
 344          {
 345   1              comm_chk_flag=false;
 346   1              osd_chk_flag=false;
 347   1      
 348   1              //VlossState=0;
 349   1              VlossFlag=0;
 350   1              VlossCount=0;
 351   1      }
 352          
 353          // ===========================================================================
 354          //
 355          //      Start Command Shell 
 356          //
 357          #if 0
              void chkStartCommShell(char *ptr)
              {
                      if( comm_chk_flag ) return;
                      if( strcmp(ptr,"PCT")==0 ) comm_chk_flag=true;
              }
              #endif
 364          void Wait_ms(U16 Tms)
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 7   

 365          
 366          {
 367   1      //      #define CPU_CLK_KHZ             40000
 368   1      #define CPU_CLK_KHZ             22118
 369   1      #define CPU_SPEED       1
 370   1      #define CountStick      (1000000U/((CPU_CLK_KHZ*CPU_SPEED)/12))/20    
 371   1      
 372   1      //#define CountStick      (1000000U/((CPU_CLK_KHZ*CPU_SPEED)/12))/10  
 373   1                 U16 count;
 374   1      
 375   1                 while(Tms)
 376   1      
 377   1                 {
 378   2      
 379   2                           for(count=0; count<CountStick; count++);//total 20 clock for this loop
 380   2      
 381   2                           Tms--;
 382   2      
 383   2                 }
 384   1      }
 385          
 386          // ===========================================================================
 387          //
 388          //
 389          //
 390          
 391          extern  U8 Cam_boot_flag;//ryan@20151201
 392          void main(void)
 393          {
 394   1              U8 Counter=0;
 395   1              U16 readtemp=0;
 396   1              U8 OsdCount1=200;//Kane @HS 2007 0725 Ver3.4
 397   1              U8 OsdCount2=100;//Kane @HS 2007 0725 Ver3.4
 398   1              U8 Camera_speed=0;
 399   1        // U8 loop=0,lp2=0,lp3=0;  //ryan..
 400   1       // U8 x,y,z;
 401   1      
 402   1        #if 0
               char busw1[14]={"busw 0 1 A1 11"};  
               char busw2[14]={"busw 0 1 A2 D7"};  
               char yvmix[8]={"yvmix 2 "};
               
              char mode[7]={"mode 0 "};
               char test[38]={"hscom 3 3 ch0:12 ch1:12 ch2:12 ch3:03 "};
              
               #endif
 411   1      
 412   1      InitialMPU();   
 413   1       PWM_init(); 
 414   1      
 415   1      //ADC_FPBS();
 416   1      #if 0
              
                while(0)
              {
              //P0=0x00;
              //printf(">");//ryan..
              //HCSB1=0; HCSB0=0;
              //P3_1=0;
              I2C_SDA=1;
              USERTMVAL1=2;
              while(USERTMVAL1>=2);
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 8   

              I2C_SDA=0;
              USERTMVAL1=2;
              while(USERTMVAL1>=2);
              
              #if 0
              MDATA=0x00;     
              HSPB    =       0;
              HWRB    =       0;
              HRDB    =       0;
              HALE    =       0;
              HCSB0   =       0;
              HCSB1   =       0;
              
              
              //      MCTRL=1;
              Wait_ms(1);
              //P3_1=1;
              
              MDATA=0xff;     
              HSPB    =       1;
              HWRB    =       1;
              HRDB    =       1;
              HALE    =       1;
              HCSB0   =       1;
              HCSB1   =       1;
              //      MCTRL=0;
              Wait_ms(1);
              #endif
              //P0=0xff;
              //HCSB1=1; HCSB0=1;
              //Wait_ms(20);
              //ping(DVR_address);
              //ping(RF_ID_address);
              //ping(Camera_address);
              
              }
              
              #endif
 465   1      
 466   1              InitialCommShell();
 467   1              ResetCommSell();
 468   1      
 469   1      #if 1
 470   1      /*
 471   1      Set_PWM_Output(0,0);
 472   1      Set_PWM_Output(1,0);
 473   1      Set_PWM_Output(2,0);
 474   1      Set_PWM_Output(3,0);
 475   1      Set_PWM_Output(4,0);
 476   1      Set_PWM_Output(5,0);
 477   1      */
 478   1              
 479   1      Power_onoff(0);
 480   1      SC16_init();
 481   1      
 482   1      Monitor_set(Monitor_offset+3);
 483   1      #if 0
              boot_flag=2;//ryan@20181130.
              Monitor_set(Monitor_offset+3);//ryan@20181130.
              boot_flag=0;//ryan@20181130.
              #else
 488   1      
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 9   

 489   1       #endif
 490   1      ///TW28_WriteByte(1,0xab,0x0a);//ryan@20150522 color bar
 491   1      
 492   1      
 493   1      #endif
 494   1      
 495   1      #if 0 
              TW28_WriteByte(1,0x11,0x00);
              TW28_WriteByte(1,0x19,0x00);
              TW28_WriteByte(1,0x21,0x00);
              TW28_WriteByte(1,0x29,0x00);
              #endif
 501   1      
 502   1      GPIO_check();   //TX¦³¿ù»~©Ò¥H¶}¾÷¥u°µ¤@¦¸baudrate³]©w
 503   1      
 504   1      //TW28_WriteByte(0,0x25,0x80);  //ryan
 505   1      EnUserTimer(USERTMID3,40);    
 506   1      EnUserTimer(USERTMID4,480);
 507   1      timerout1=480;
 508   1      //EnUserTimer(USERTMID5,16);//for camera moving//300ms
 509   1      EnUserTimer(USERTMID5,4);//for camera moving//300ms
 510   1      timerout2=600+600+600;//for camera speed//15s
 511   1      //EnUserTimer(USERTMID6,600+600+600);//for camera speed//15s
 512   1      Camera_speed=(((DVR_GetIO()&0x3f)&0x10)>>4);
 513   1      
 514   1              while(1){
 515   2            
 516   2              CommandShell();
 517   2              if(RScommand.commFlage == true) PCT_RunCommShell(RScommand.commBuf); 
 518   2              if(RScommand.commFlage == true) ResetCommSell(); 
 519   2                 
 520   2              if(VlossFlag==1)
 521   2              {
 522   3                      if(PCT_CheckSystem())//Kane Modified
 523   3                              VlossFlag=0;
 524   3              }
 525   2      
 526   2              //<<<<<<<<<<<<<<<<<<<<<<<
 527   2                      
 528   2              if(RS_RxReady()) EnUserTimer(USERTMID1,OsdCount1);//Kane @HS 2007 0725 Ver3.4
 529   2      
 530   2      
 531   2      
 532   2              if(USERTMVAL1==1)
 533   2              {
 534   3              //PCT_AudioActionForHS();
 535   3              //PCT_OSDActionForHS();
 536   3              //PCT_FlashOSDCtrl(OFF);
 537   3              DisUserTimer(USERTMID1);
 538   3              EnUserTimer(USERTMID0,OsdCount2);//Kane @HS 2007 0725 Ver3.4    // Reset Scan Time, Delay Check and show
 539   3              }
 540   2      
 541   2                                                       if((USERTMVAL0==1)&&(Com_start==0)) 
 542   2                                                      {
 543   3                                                       // Temp_check(); 
 544   3                                                              //Press_check(); 
 545   3                                                      PCT_GetVideoSignalStatus();     // Check and Show "VLoss", scan time = 500ms
 546   3                                                      //GPIO_check();   //ryan..
 547   3                                                      #ifndef screen3
 548   3                                                              if(Monitor_state!=Monitor_mode)
 549   3                                                              {
 550   4                                                              Monitor_set(Monitor_mode);
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 10  

 551   4                                                              }
 552   3                                                      #endif
 553   3                                                      
 554   3                                                      //#if 1///#ifdef  get_data_debug
 555   3                                                              //printf("\r\n RsRxRp=%x",(U16) RsRxRp);        
 556   3                                                              //#endif
 557   3                                                              
 558   3                                                      EnUserTimer(USERTMID0,20);
 559   3                                                              
 560   3                                                       }
 561   2      
 562   2              if((USERTMVAL5==1)&&(Camera_flag>=1)&&(Cam_boot_flag==1))//trigger the  up,down,ccw,cw functions
 563   2              {
 564   3                      EnUserTimer(USERTMID5,4);
 565   3                      Camera_move();
 566   3               
 567   3              }
 568   2      
 569   2      
 570   2              
 571   2      
 572   2                #if 0///ryan@20150804
                         Temp_check(); 
                              Press_check(); 
                        #else
 576   2      
 577   2              
 578   2                      if((USERTMVAL3==1)&&(Camera_flag==0)&&(Cam_boot_flag==1)) 
 579   2                      {
 580   3                              #ifdef  get_data_debug
                                      printf("\r\n SC16_com_state=%x",(U16) SC16_com_state);
                                      #endif  
 583   3      
 584   3                      SC16_data_reset(buff_sel(SC16_com_state));
 585   3                      SC16_com_state++;
 586   3                      EnUserTimer(USERTMID3,40);
 587   3                      if(SC16_com_state>=buff_num) SC16_com_state=0;
 588   3                      //work_flag=1;
 589   3                      } 
 590   2                      else
 591   2                      SC16_DataCheck();   //check sc16i750 
 592   2      
 593   2      
 594   2                      if(timerout1==1)
 595   2                      {
 596   3                      SC16_busy_flag=0;
 597   3                      timerout1=480;
 598   3                                              #ifdef  get_data_debug
                                                      printf("\r\n SC16_busy_flag_clear=%x",(U16) SC16_busy_flag);
                                                      #endif  
 601   3                      }
 602   2      #endif
 603   2      
 604   2      
 605   2              //SC16_DataCheck();   //check sc16i750 
 606   2      
 607   2      //set camera speed
 608   2      if((timerout2==1)&&(Cam_boot_flag==1))
 609   2      {
 610   3      Set_Camera_speed(Camera_speed); 
 611   3      timerout2=0;
 612   3      }
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 11  

 613   2      
 614   2                      WDTCR|=0x10;
 615   2      
 616   2                      #if 0//ryan@20151106
                              while(CB_flag==1)
                              {
                                      //if((get_data_addr)&&(timerout3>=CB_delay))
                                      if(timerout3>=CB_delay)
                                      {
                                      Get_Data(get_data_addr, get_data_val);
                                      
                                      CB_flag=0;
                                      timerout4=0;
                                      }
                                      WDTCR|=0x10;                                    
                              }
                              
                              timerout3=0;
                              #endif
 632   2      
 633   2      
 634   2      
 635   2              }
 636   1              OsdCount1=10;//Kane @HS 2007 0725 Ver3.4
 637   1              OsdCount2 = 20;//Kane @HS 2007 0725 Ver3.4
 638   1      
 639   1         
 640   1      }
 641          
 642          //void main_loop(void)
 643          //{
 644          
 645          
 646          //}
 647          // ===========================================================================
 648          //
 649          //
 650          //
 651          void InitialMPU(void){
 652   1      
 653   1              IP = 0x00;
 654   1              IE = 0x00;              
 655   1      
 656   1      //      PCON = 0x80;    // Set SMOD bit7 in power ctrl reg     //smod=1
 657   1                                              // This bit doubles the baud rate 
 658   1              PCON = 0x00;    // Clear SMOD bit7 in power ctrl reg   //smod=0
 659   1                                              // This bit doubles the baud rate 
 660   1              //watch dog
 661   1               WDTCR=0x27;   //pre-scaling value: 256  //4s will reset
 662   1               
 663   1              PSW  = 0x00;    // Set Program state Register
 664   1              TMOD = 0x22;    // Set Timer MODE Register
 665   1      //      TMOD = 0x12;    // Set Timer MODE Register
 666   1                                              // Timer0: MODE=1, 16-BIT Timer
 667   1                                              // Timer1: MODE=2, 8-BIT Auto Reload )
 668   1        //  TCON = 0x00;      // Set Timer0/Timer1 Control Register
 669   1          TCON = 0x00;        // Set Timer0/Timer1 Control Register
 670   1                                              // Timer0=OFF,Timer1=OFF
 671   1      //      SCON = 0x52;    // Setup Serial control Register
 672   1      //          SCON = 0x00;
 673   1                                              // Mode 1: Start Bit=1,Stop Bit=1,Data Bit=8 
 674   1                                              // and ready Transmit
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 12  

 675   1                                              // REN: enable receiver 
 676   1              
 677   1              InitialUART();
 678   1              InitialTimer0();
 679   1            InitialTimer2();
 680   1          
 681   1      
 682   1      //XICON=0x00;
 683   1      //AUXIE=0x00; 
 684   1      AUXR=0;
 685   1      AUXR1=0;
 686   1              TI = 1;                 //* Set TI to indicate ready to xmit */
 687   1              EA=1;
 688   1              _nop_();
 689   1          
 690   1      
 691   1      
 692   1      #if 0
              
              CL=0; //PCA counter..
              CH=0;
              CMOD=0x04; // PWM use to  timer-0
              CCON=0x40;  
              
              //CMOD=0x00; // PWM use to  crystal
              //CL=(65536-High);    //PCA counter..
              //CH=(65536-High)>>8;
              //CL=1;    //PCA counter..
              //CH=128;
              
              AUXR2|=0x80;    //Fosc/12 for timer-0
              //CMOD=0x00;///  /12    ///22.1184MHz
              //CMOD=0x02;/// /2
              
              CCAP0L=0x00;
              CCAP0H =(256-128);
              
              CCAP1L=0x00;
              CCAP1H =(256-128);
              
              CCAP2L=0x00;
              CCAP2H =(256-128);
              
              CCAP3L=0x00;
              CCAP3H =(256-128);
              
              CCAP4L=0x00;
              CCAP4H =(256-128);
              
              CCAP5L=0x00;
              CCAP5H =(256-128);
              
              CCAPM0  = 0x42;
              CCAPM1  = 0x42;
              CCAPM2  = 0x42;
              CCAPM3  = 0x42;
              CCAPM4  = 0x42;
              CCAPM5  = 0x42;
              
              PCAPWM0 = 0x00;
              PCAPWM1 = 0x00;
              PCAPWM2 = 0x00;
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 13  

              PCAPWM3 = 0x00;
              PCAPWM4 = 0x00;
              PCAPWM5 = 0x00;
              
              
               //-------------------------------
              #endif
 744   1      P0M0=0;
 745   1      P0M1=0;
 746   1      
 747   1      P1M0|=0x03;   //ADC0 & ADC1
 748   1      P1M1&=0xFC;  
 749   1       
 750   1      P2M0=0;
 751   1      P2M1=0;
 752   1      
 753   1      P3M0=0x00;
 754   1      P3M1=0x00;
 755   1       
 756   1      P4M0=0x00;
 757   1      P4M1=0x04;
 758   1      P4_1=0;
 759   1      
 760   1      
 761   1      P1_2=0;
 762   1      P1_3=0;
 763   1      P1_4=0;
 764   1      P1_5=0;
 765   1      P1_6=0;
 766   1      P1_7=0;
 767   1      
 768   1      //P1_1=1;//ryan@20150908
 769   1      
 770   1      }
 771          //----------------------------------------------------------
 772          
 773          void Set_PWM_Output (U8 addr, U8 val)
 774          {
 775   1      #ifdef _LED_PWM_HALF
 776   1              #ifdef _LED_PWM_DECREASE
 777   1              U8 num[6]={255,243,237,232,226,222};//0%,5%,7%,9%,11%,13%
 778   1              #else   
                      U8 num[6]={255,200+28,150+53,100+79+5,50+103,0+128};//0%,10%,20%,30%,40%,50%
                      #endif
 781   1      #else
              U8 num[6]={255,200,150,100,50,0};//0%,20%,40%,60%,80%,100%
              #endif
 784   1      
 785   1      //CL=0; //PCA counter..
 786   1      //CH=0;
 787   1      //CMOD=0x04; // PWM use to  timer-0
 788   1      //CCON=0x40; 
 789   1      //AUXR2|=0x80;    //Fosc/12 for timer-0
 790   1      
 791   1      
 792   1      
 793   1       switch(addr)
 794   1          {
 795   2          case 0:     
 796   2                                                      CCAP0L=0x00;  
 797   2                                if(val==0)    CCAPM0=0x00;
 798   2                                              else     CCAPM0=0x42;                                                                   
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 14  

 799   2                                                              
 800   2                       CCAP0H =num[val];      
 801   2                       PCAPWM0 = 0x00;
 802   2                      break;
 803   2          case 1: 
 804   2                                                      CCAP1L=0x00;  
 805   2                                if(val==0)    CCAPM1=0x00;
 806   2                                              else     CCAPM1=0x42;                                                                   
 807   2                                              
 808   2                     CCAP1H =num[val];    
 809   2                      PCAPWM1 = 0x00;
 810   2                      break;
 811   2          case 2:  
 812   2                                                      CCAP2L=0x00;  
 813   2                                if(val==0)    CCAPM2=0x00;
 814   2                                              else     CCAPM2=0x42;
 815   2                                              
 816   2                      CCAP2H =num[val];   
 817   2                      PCAPWM2 = 0x00;
 818   2                      break; 
 819   2          case 3:
 820   2                                                      CCAP3L=0x00;  
 821   2                                if(val==0)    CCAPM3=0x00;
 822   2                                              else     CCAPM3=0x42;   
 823   2                                              
 824   2                      CCAP3H =num[val];   
 825   2                      PCAPWM3 = 0x00;
 826   2                      break;
 827   2          case 4:
 828   2                                                      CCAP4L=0x00;  
 829   2                                if(val==0)    CCAPM4=0x00;
 830   2                                              else     CCAPM4=0x42;   
 831   2                                              
 832   2                      CCAP4H =num[val];  
 833   2                      PCAPWM4 = 0x00;
 834   2                      break;
 835   2          case 5:
 836   2                                                      CCAP5L=0x00;  
 837   2                                if(val==0)    CCAPM5=0x00;
 838   2                                              else     CCAPM5=0x42;
 839   2                                              
 840   2                      CCAP5H =num[val];  
 841   2                      PCAPWM5 = 0x00;
 842   2                      break;
 843   2           default:   
 844   2                              break;
 845   2          }
 846   1      
 847   1      
 848   1      }
 849          
 850          //-----------------------------------------------------------
 851          void PWM_init(void)
 852          {
 853   1      
 854   1      CL=0; //PCA counter..
 855   1      CH=0;
 856   1      CMOD=0x04; // PWM use to  timer-0
 857   1      //CMOD=0x00; // PWM use to  timer-0
 858   1      
 859   1      CCON=0x40;  
 860   1      
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 15  

 861   1      //CMOD=0x00; // PWM use to  crystal
 862   1      //CL=(65536-High);    //PCA counter..
 863   1      //CH=(65536-High)>>8;
 864   1      //CL=1;    //PCA counter..
 865   1      //CH=128;
 866   1      
 867   1      AUXR2|=0x80;    //Fosc/12 for timer-0
 868   1      //CMOD=0x00;///  /12    ///22.1184MHz
 869   1      //CMOD=0x02;/// /2
 870   1      
 871   1      /*
 872   1      CCAP0L=0x00;
 873   1      CCAP0H =(256-128);
 874   1      
 875   1      CCAP1L=0x00;
 876   1      CCAP1H =(256-128);
 877   1      
 878   1      CCAP2L=0x00;
 879   1      CCAP2H =(256-128);
 880   1      
 881   1      CCAP3L=0x00;
 882   1      CCAP3H =(256-128);
 883   1      
 884   1      CCAP4L=0x00;
 885   1      CCAP4H =(256-128);
 886   1      
 887   1      CCAP5L=0x00;
 888   1      CCAP5H =(256-128);
 889   1      
 890   1      CCAPM0  = 0x42;
 891   1      CCAPM1  = 0x42;
 892   1      CCAPM2  = 0x42;
 893   1      CCAPM3  = 0x42;
 894   1      CCAPM4  = 0x42;
 895   1      CCAPM5  = 0x42;
 896   1      
 897   1      PCAPWM0 = 0x00;
 898   1      PCAPWM1 = 0x00;
 899   1      PCAPWM2 = 0x00;
 900   1      PCAPWM3 = 0x00;
 901   1      PCAPWM4 = 0x00;
 902   1      PCAPWM5 = 0x00;
 903   1      */
 904   1      }
 905          
 906          //-----------------------------------------
 907          U8 Monitor_set(U8 val)
 908          {
 909   1      char busw1[14]={"busw 0 1 A1 11"};  
 910   1      char busw2[14]={"busw 0 1 A2 D7"};  
 911   1      char yvmix[8]={"yvmix 4 "};
 912   1      char mode[7]={"mode 0 "};
 913   1      
 914   1      
 915   1      //char conf[38]={"hscom 2 2 ch0:12 ch1:12 ch2:02 ch3:03 "};
 916   1      //char conf1[38]={"hscom 1 1 ch0:12 ch1:02 ch2:02 ch3:03 "};
 917   1      //ch0 Camera  
 918   1      //ch1 DVR       
 919   1      //ch2 Rear
 920   1      
 921   1      
 922   1      #ifdef OSD_off
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 16  

 923   1      
 924   1      char conf1[38]={"hscom 1 1 ch0:10 ch1:00 ch2:00 ch3:00 "};   // C
 925   1      char conf2[38]={"hscom 1 1 ch2:10 ch1:00 ch0:00 ch3:00 "};   // R
 926   1      char conf3[38]={"hscom 1 1 ch1:10 ch0:00 ch2:00 ch3:00 "};  // D
 927   1      
 928   1      char conf4[38]={"hscom 2 2 ch2:10 ch0:10 ch1:00 ch3:00 "};   //CR
 929   1      char conf5[38]={"hscom 2 2 ch0:10 ch2:10 ch1:00 ch3:00 "};  //RC
 930   1      
 931   1      char conf6[38]={"hscom 2 2 ch1:10 ch0:10 ch2:00 ch3:00 "};  // DC
 932   1      char conf7[38]={"hscom 2 2 ch0:10 ch1:10 ch2:00 ch3:00 "};  // CD
 933   1      
 934   1      char conf8[38]={"hscom 2 2 ch1:10 ch2:10 ch0:00 ch3:00 "};  // DR
 935   1      char conf9[38]={"hscom 2 2 ch2:10 ch1:10 ch2:00 ch3:00 "};  // RD
 936   1      
 937   1      char conf10[38]={"hscom 3 3 ch0:10 ch1:10 ch2:10 ch3:00 "};
 938   1      
 939   1      
 940   1      #else
              char conf1[38]={"hscom 1 1 ch0:12 ch1:02 ch2:02 ch3:03 "};   // C
              char conf2[38]={"hscom 1 1 ch2:12 ch1:02 ch0:02 ch3:03 "};   // R
              char conf3[38]={"hscom 1 1 ch1:12 ch0:02 ch2:02 ch3:03 "};  // D
              
              char conf4[38]={"hscom 2 2 ch2:12 ch0:12 ch1:02 ch3:03 "};   //CR
              char conf5[38]={"hscom 2 2 ch0:12 ch2:12 ch1:02 ch3:03 "};  //RC
              
              char conf6[38]={"hscom 2 2 ch1:12 ch0:12 ch2:02 ch3:03 "};  // DC
              char conf7[38]={"hscom 2 2 ch0:12 ch1:12 ch2:02 ch3:03 "};  // CD
              
              char conf8[38]={"hscom 2 2 ch1:12 ch2:12 ch0:02 ch3:03 "};  // DR
              char conf9[38]={"hscom 2 2 ch2:12 ch1:12 ch2:02 ch3:03 "};  // RD
              
              char conf10[38]={"hscom 3 3 ch0:12 ch1:12 ch2:12 ch3:03 "};
              
              #endif
 957   1      
 958   1      char conf11[38]={"hscom 1 1 ch3:00 ch1:00 ch2:00 ch0:00 "};
 959   1      
 960   1      //PU8  ptr;
 961   1      U8 Error=0;
 962   1      U8 ch=0;
 963   1      
 964   1      ch=(val-Monitor_offset);
 965   1      
 966   1      #ifdef Crop_Shrink_flag//20150413
 967   1      if(ch>=10)
 968   1              ch=ch-4;
 969   1      else
 970   1              Crop_f=0;//clear Crop_f   
 971   1      
 972   1      #endif
 973   1      
 974   1       Monitor_state=val;  
 975   1      
 976   1      switch(ch)
 977   1      {
 978   2      case 0:  PIP_flag=1; break;
 979   2      case 1:  PIP_flag=0; break;
 980   2      case 2: 
 981   2                      Back_f=0;                       
 982   2                    Main_f=1;  
 983   2                        break;                
 984   2      case 3:         Back_f=1;  
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 17  

 985   2                    Main_f=2;
 986   2                        break;                
 987   2      case 4:         Shrink_f=1;
 988   2                      Main_f=4; 
 989   2                      break;          
 990   2      case 5:  Shrink_f=0;  
 991   2                      Main_f=1;
 992   2                    break;
 993   2      #ifdef Crop_Shrink_flag//ryan@20150413
 994   2      case 6:       //crop+shrink
 995   2              Crop_f=0x14;
 996   2                  break;
 997   2      case 7:          //shrink+crop
 998   2              Crop_f=0x41;    
 999   2                  break;
1000   2      #endif
1001   2      default:        Main_f=1; break;
1002   2      }
1003   1      
1004   1      
1005   1      if(Crop_f>=1)
1006   1      {
1007   2      m_current=Crop_f;//ryan@20150413
1008   2      }
1009   1      else if(PIP_flag==1)
1010   1              {
1011   2                      if(Back_f)
1012   2                              {
1013   3                                                      if(Shrink_f==1)
1014   3                                                      {
1015   4                                                      Main_f=2;
1016   4                                                      Small_f=4;
1017   4                                                      }
1018   3                                                      else
1019   3                                                      {
1020   4                                                      Main_f=2;
1021   4                                                      Small_f=1;                                              
1022   4                                                      }
1023   3                              }
1024   2                      else
1025   2                              {
1026   3                                                      if(Shrink_f==1)
1027   3                                                      {
1028   4                                                      Main_f=4;
1029   4                                                      Small_f=2;
1030   4                                                      }
1031   3                                                      else
1032   3                                                      {
1033   4                                                      Main_f=1;
1034   4                                                      Small_f=2;                                              
1035   4                                                      }
1036   3      
1037   3                              }
1038   2      
1039   2                      m_current=(Main_f<<4)|Small_f;
1040   2                              
1041   2              }
1042   1      else
1043   1      {
1044   2                              
1045   2                              if(Back_f)
1046   2                              {
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 18  

1047   3                                                      Main_f=2;
1048   3                              }
1049   2                              else
1050   2                              {
1051   3                                                      if(Shrink_f==1)
1052   3                                                      {
1053   4                                                      Main_f=4;
1054   4                                                      Small_f=2;
1055   4                                                      }
1056   3                                                      else
1057   3                                                      {
1058   4                                                      Main_f=1;
1059   4                                                      Small_f=2;                                              
1060   4                                                      }
1061   3      
1062   3                              }
1063   2                                      
1064   2                      m_current=Main_f<<4;
1065   2      
1066   2      }
1067   1      /*
1068   1      if(boot_flag==2)
1069   1      {
1070   1      ///read 0xA1
1071   1      //memcpy ((RScommand.commBuf), busr1, sizeof(busr1) );
1072   1      //PCT_RunCommShell(RScommand.commBuf);
1073   1      //printf("%x",(U16)(ch));
1074   1      //printf("\r\nReadAsicByte == %x", (U16)TW28_ReadByte(1, 0xA1));
1075   1      
1076   1      memcpy ((RScommand.commBuf), busw1, sizeof(busw1) );
1077   1      PCT_RunCommShell(RScommand.commBuf); 
1078   1      
1079   1      //memcpy ((RScommand.commBuf), busw2, sizeof(busw2) );
1080   1      //PCT_RunCommShell(RScommand.commBuf); 
1081   1      
1082   1      //memcpy ((RScommand.commBuf), mode, sizeof(mode)  );
1083   1      //PCT_RunCommShell(RScommand.commBuf); 
1084   1      return 0;
1085   1      }
1086   1      else
1087   1              */
1088   1              
1089   1      if(boot_flag)
1090   1      {  
1091   2              //InitialCommShell();
1092   2              PCT_InitialTW2835();    // Initial RssetN for TW2835
1093   2              //ResetCommSell();
1094   2      #if 0///ryan@20181217
              memcpy ((RScommand.commBuf), busw1, sizeof(busw1) );
              PCT_RunCommShell(RScommand.commBuf); 
              
              memcpy ((RScommand.commBuf), busw2, sizeof(busw2) );
              PCT_RunCommShell(RScommand.commBuf); 
              
              //memcpy ((RScommand.commBuf), yvmix, sizeof(yvmix) );
              //PCT_RunCommShell(RScommand.commBuf); 
              
              memcpy ((RScommand.commBuf), mode, sizeof(mode)  );
              //printf("RScommand.commBuf=%s\r\n",RScommand.commBuf);  //ryan
              PCT_RunCommShell(RScommand.commBuf); 
              #endif
1108   2      }
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 19  

1109   1      else
1110   1      {
1111   2              #ifdef black_change
                              #if 1 
                              TW28_WriteByte(1,0x11,0x00);
                              TW28_WriteByte(1,0x19,0x00);
                              TW28_WriteByte(1,0x21,0x00);
                              //TW28_WriteByte(1,0x29,0x00);
              
                              TW28_WriteByte(0,0xc3,0xf8);
                              TW28_WriteByte(0,0xc4,0xff);
                              TW28_WriteByte(1,0x0f,0x00);/// black boundary color
                              //TW28_WriteByte(1,0x5f,0x30);
                              #endif
                              
                      memcpy ((RScommand.commBuf), conf11, sizeof(conf11) );
                      PCT_RunCommShell(RScommand.commBuf); 
                      Wait_ms(25+100+100);
                      #endif
1128   2      }
1129   1      
1130   1      
1131   1      #ifdef screen3
              if(boot_flag==1) m_current=10;
              #endif
1134   1      
1135   1      switch(m_current)
1136   1      {
1137   2      #if 1
1138   2              #if 1//ryan
1139   2      case 0x10: memcpy ((RScommand.commBuf), conf1, sizeof(conf1) ); TW28_WriteByte(1,0x0f,0x03);break;  //C
1140   2      case 0x20: memcpy ((RScommand.commBuf), conf2, sizeof(conf2) ); TW28_WriteByte(1,0x0f,0x03);break;  //R
1141   2      case 0x40: memcpy ((RScommand.commBuf), conf1, sizeof(conf1) ); TW28_WriteByte(1,0x0f,0x03);break;  //D
1142   2      case 0x12: memcpy ((RScommand.commBuf), conf4, sizeof(conf4) ); break;  //CR
1143   2      case 0x21: memcpy ((RScommand.commBuf), conf5, sizeof(conf5) ); break;  //RC
1144   2      case 0x14: memcpy ((RScommand.commBuf), conf6, sizeof(conf6) ); break;  //DC
1145   2      case 0x41: memcpy ((RScommand.commBuf), conf7, sizeof(conf7) ); break;  //CD
1146   2      case 0x24: memcpy ((RScommand.commBuf), conf5, sizeof(conf5) ); break;  //DR
1147   2      case 0x42: memcpy ((RScommand.commBuf), conf4, sizeof(conf4) ); break;  //RD
1148   2      
1149   2              #else
              case 0x10: memcpy ((RScommand.commBuf), conf1, sizeof(conf1) ); TW28_WriteByte(1,0x0f,0x03);break;  //C
              case 0x20: memcpy ((RScommand.commBuf), conf2, sizeof(conf2) ); TW28_WriteByte(1,0x0f,0x03);break;  //R
              case 0x40: memcpy ((RScommand.commBuf), conf3, sizeof(conf3) ); TW28_WriteByte(1,0x0f,0x03);break;  //D
              case 0x12: memcpy ((RScommand.commBuf), conf4, sizeof(conf4) ); break;  //CR
              case 0x21: memcpy ((RScommand.commBuf), conf5, sizeof(conf5) ); break;  //RC
              case 0x14: memcpy ((RScommand.commBuf), conf6, sizeof(conf6) ); break;  //DC
              case 0x41: memcpy ((RScommand.commBuf), conf7, sizeof(conf7) ); break;  //CD
              case 0x24: memcpy ((RScommand.commBuf), conf8, sizeof(conf8) ); break;  //DR
              case 0x42: memcpy ((RScommand.commBuf), conf9, sizeof(conf9) ); break;  //RD
                      #endif
1160   2      #ifdef screen3
              case 10:            memcpy ((RScommand.commBuf), conf10, sizeof(conf10) ); break;
              #endif
1163   2      
1164   2      default:
1165   2                      memcpy ((RScommand.commBuf), conf1, sizeof(conf1) ); break;
1166   2      #else
              case 0x00: memcpy ((RScommand.commBuf), conf1, sizeof(conf1) ); break;
              case 0x01: memcpy ((RScommand.commBuf), conf2, sizeof(conf2) ); break;
              case 0x10: memcpy ((RScommand.commBuf), conf4, sizeof(conf4) ); break;
              case 0x11: memcpy ((RScommand.commBuf), conf3, sizeof(conf3) ); break;
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 20  

              #ifdef screen3
              case 4:             memcpy ((RScommand.commBuf), conf5, sizeof(conf5) ); break;
              #endif
              
              default:
                              memcpy ((RScommand.commBuf), conf1, sizeof(conf1) ); break;
              #endif  
1178   2      }
1179   1      
1180   1      #ifdef screen3
              if(boot_flag) 
              {
                       m_current=0;        
              }
              #endif
1186   1      
1187   1      boot_flag=0;
1188   1      //printf("RScommand.commBuf=%s\r\n",RScommand.commBuf);  //ryan
1189   1      PCT_RunCommShell(RScommand.commBuf); 
1190   1      
1191   1      
1192   1      switch(m_current)
1193   1      {
1194   2      //#if 1
1195   2      case 0x10: Bound_Set(0x00); break;  //C
1196   2      case 0x20: Bound_Set(0x00); break;  //R
1197   2      case 0x40: Bound_Set(0x00);Error=1; break;  //D
1198   2      case 0x12: Bound_Set(0x01); break;  //CR
1199   2      case 0x21: Bound_Set(0x01); break;  //RC
1200   2      case 0x14: Bound_Set(0x01); break;  //DC
1201   2      case 0x41: Bound_Set(0x01); break;  //CD
1202   2      case 0x24: Bound_Set(0x01); Error=1;break;  //DR
1203   2      case 0x42: Bound_Set(0x01);Error=1; break;  //RD
1204   2      
1205   2      default:
1206   2                       break;
1207   2      }
1208   1      
1209   1      #ifdef  black_change
              TW28_WriteByte(0,0xc3,0x01);
              TW28_WriteByte(0,0xc4,0x00);
              #endif
1213   1      
1214   1                      #ifdef  Monitor_debug
                      printf("\r\nMonitor mode=%x, m_current=%x ",(U16)ch, (U16)m_current);   
                              //printf(" ,return=%x", (U16)Error);
                      
                         
              
                              if(Error==1)
                              {
                                      //SC16_Com
                                              //RS_tx(STX);
                                              // RS_tx(SC16_Com[1]);
                                              // RS_tx(SC16_Com[2]);                                                           
                                              // RS_tx(ETX);
                                              // RS_tx(SC16_Com[4]);
                                               RS_tx(0x35);
                                       RS_tx(0x35);
                                        RS_tx(0x35);
                                              printf(" Error=1");
                              }       
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 21  

                              #endif  
1234   1      
1235   1      return Error;
1236   1      
1237   1      }
1238          
1239          //-----------------------------------------
1240          
1241          U8 PWM_set(U8 val)
1242          {
1243   1      
1244   1      U8 Error=0,ch=0,set_val=0;
1245   1      
1246   1      if(val>=PWM1_offset&&val<=(PWM6_offset+6))
1247   1      {
1248   2      ch=((val-PWM1_offset)/6);
1249   2              set_val=(val-PWM1_offset)%6;
1250   2      
1251   2              
1252   2                      Set_PWM_Output(ch,set_val);
1253   2      
1254   2                      #ifdef  SC16IS750_DEBUG_PRINT 
                              printf("\r\nPWM_set ch=%x , val=%x",(U16)ch,(U16)set_val);
                              #endif   
1257   2                      
1258   2                              Error=1;
1259   2      }
1260   1      
1261   1      return Error;
1262   1      }
1263          
1264          //-----------------------------------------
1265          
1266          void Temp_check(void)
1267          {
1268   1      U16 val=0;
1269   1      //U8 loop=0;
1270   1      
1271   1      //val=(ADT75_GetTemp()>>4)/16;
1272   1      val=(ADT75_GetTemp()>>4)/16;
1273   1      if((P1_1==0))
1274   1        val=99;
1275   1      //else if(val&0x0800==1)
1276   1              //val=0;
1277   1      #if 1
1278   1      
1279   1              //val&=99;//ryan@20150909
1280   1      
1281   1      if((val%10)>9);
1282   1      else
1283   1      Camera_temp0=(U8)(val%10)+0x30;
1284   1      
1285   1      Camera_temp1=(U8)(val/10)+0x30;
1286   1                      
1287   1                      //if(Temp_timeout==1)
1288   1                      //      {
1289   1                      //printf("\r\nTemp_check=%x",val);
1290   1                      //Temp_timeout= 120;
1291   1                      //      }
1292   1      #else
              SC16_Com[0]=STX;
              SC16_Com[1]=0x32;
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 22  

              SC16_Com[2]=0x31;
              SC16_Com[3]=(U8)(val/10)+0x30;
              SC16_Com[4]=(U8)(val%10)+0x30;
              SC16_Com[5]=0x20;
              SC16_Com[6]=0x20;
              SC16_Com[7]=ETX;
              SC16_Com[8]=0;
              
              #ifdef BCC_noSTXEXT          ////XOR 1-6
              for(loop=1;loop<=6;loop++)
              SC16_Com[8]^=SC16_Com[loop];
              #else                                 //XOR 0-7
              for(loop=0;loop<=7;loop++)
              SC16_Com[8]^=SC16_Com[loop];
              #endif
              
              
              
                      for(loop=0;loop<=8;loop++)
                      {
                      RS_tx(SC16_Com[loop]);
                      //DELAY_FOR(200);
                      }
              #endif
1319   1      
1320   1      }
1321          
1322          //---------------------------------------------------
1323          
1324          
1325          void Press_check(void)
1326          {
1327   1      
1328   1      //#define _2V  101300  ///2.0V
1329   1      //#define _3V  199400  ////3.0V
1330   1      //#define _1V_step   311
1331   1      //#define press_offset   0
1332   1      //#define ap_offset 60-8
1333   1      
1334   1      
1335   1      U16 val=0;
1336   1      U8 loop=0;
1337   1      #if 1
1338   1      
1339   1      
1340   1      #define _2V  101300  ///2.0V
1341   1      #define _3V  199400  ////3.0V
1342   1      #define _1V_step   310//0//311///one step=0.0031V refernec voltage=3.3V
1343   1      #define press_offset  (-31)//// (50+30-1) ///1.850V offset to 2.0V ryan@20180727
1344   1      #define ap_offset 60-8
1345   1      
1346   1      //U32 temp_val=0;
1347   1      float temp_val=0;
1348   1      val=ADC_FPBS();
1349   1      
1350   1      val=val+press_offset;
1351   1      temp_val=val;
1352   1      
1353   1      #ifdef  press_debug 
              printf("\r\nADC_FPBS()=%x ",(U16)val);
              #endif  
1356   1                      
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 23  

1357   1      #if 1//ryan@20180727
1358   1      #if 1//ryan@20181203
1359   1              //À£¤OP=101.3*((ADC-281)/281)=¤j®ðÀ£¤O[KPa]
1360   1              //ADC=562 À£¤OP=101.3*((562-281)/281)=101.3[KPa]//¼Ð·Ç
1361   1              //ADC=500 À£¤OP=101.3*((500-281)/281)=78.9[KPa]
1362   1              //ADC=844 À£¤OP=101.3*((844-281)/281)=200.4[KPa]
1363   1              temp_val=(101.3)*((temp_val-281)/281);
1364   1              
1365   1      #else//>2.0  645*0.0031=2.0V
              {
                              if(temp_val<=967)   ///<3V  967*0.0031=3.0V
                                      {
                                temp_val=(((((temp_val*_1V_step)/100)-2000)*98)+101300);
                                      }
                              else
                                      {
                                       temp_val=199400;
                                      }
              }
              else                              ///2.0V to 1.6V
              {
                      if(temp_val>=(516+1))   ///>1.6 V   516*0.0031=1.6V
                                      {
                                        temp_val=(((((temp_val*_1V_step)/100)-1600)*98)+62100);
                                      }
                              else
                                      {
                                      temp_val=62100;
                                      }
                              
              }
                      #endif
1389   1      #else
              if(temp_val>=(_1V_step*2))   ///>2.0  
              {
                              if(temp_val<=(_1V_step*3))   ///<3V
                                      {
                                        //temp_val=(val-_1V_step)*487;
                                        temp_val=((_1V_step*3)-temp_val)*(316+ap_offset);
                                      }
                              else
                                      {
                                       temp_val=199400;
                                      }
              }
              else                              ///2.0V to 1.6V
              {
                      //if(temp_val>=328)   ///>1.6 V
                      if(temp_val>=499)   ///>1.6 V
                                      {
                                        //temp_val=((_1V_step*2)-val)*478;
                                        temp_val=((_1V_step*2)-val)*210;
                                      }
                              else
                                      {
                                      temp_val=62100;
                                      }
              }
              #endif
1416   1      
1417   1      #if 1//ryan@20181203
1418   1      val=(U16)(temp_val*10);
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 24  

1419   1      temp_val=(U16)(temp_val*10);
1420   1      #else
              val=(temp_val/100);
              temp_val=val;
              #endif
1424   1      
1425   1      if((val>=1003)&&(val<=1023))
1426   1      {
1427   2      val=1013;
1428   2      }
1429   1      else if(val>9999)  val=9999;
1430   1      
1431   1      //val=1994;
1432   1      
1433   1      Camera_press3=(val/1000)+0x30;  val=(val%1000);
1434   1      Camera_press2=(val/100)+0x30;  val=(val%100);
1435   1      Camera_press1=(val/10)+0x30;  val=(val%10);
1436   1      Camera_press0=val+0x30;
1437   1      
1438   1      
1439   1                      #ifdef  press_debug 
                              printf("\r\nGet_press=%x ",(U16)temp_val);
                              #endif  
1442   1      
1443   1      
1444   1      
1445   1      
1446   1      #else
              Camera_press1=(U8)(val/10)+0x30;
              Camera_press0=(U8)(val%10)+0x30;
              
              
              /*
              SC16_Com[0]=STX;
              SC16_Com[1]=0x32;
              SC16_Com[2]=0x31;
              SC16_Com[3]=(U8)(val/10)+0x30;
              SC16_Com[4]=(U8)(val%10)+0x30;
              SC16_Com[5]=0x20;
              SC16_Com[6]=0x20;
              SC16_Com[7]=ETX;
              SC16_Com[8]=0;
              
              #ifdef BCC_noSTXEXT          ////XOR 1-6
              for(loop=1;loop<=6;loop++)
              SC16_Com[8]^=SC16_Com[loop];
              #else                                 //XOR 0-7
              for(loop=0;loop<=7;loop++)
              SC16_Com[8]^=SC16_Com[loop];
              #endif
              
              
              
                      for(loop=0;loop<=8;loop++)
                      {
                      RS_tx(SC16_Com[loop]);
                      //DELAY_FOR(200);
                      }
              
              
                              #ifdef  SC16IS750_DEBUG_PRINT 
                              printf("\r\nGet_press=%x ",(U16)val);
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 25  

                              #endif  
              
                              */
              
              #endif
1486   1      }
1487          
1488          //---------------------------------------------------
1489          void Version_check(void)
1490          {
1491   1      
1492   1      //U16 val=0;
1493   1      U8 loop;
1494   1      
1495   1      SC16_Com[0]=STX;
1496   1      SC16_Com[1]=0x32;
1497   1      SC16_Com[2]=0x50;
1498   1      SC16_Com[3]=Ver0+0x30;
1499   1      SC16_Com[4]=Ver1+0x30;
1500   1      //SC16_Com[5]=Ver2+0x30;
1501   1      SC16_Com[5]=Ver2;
1502   1      SC16_Com[6]=0x20;
1503   1      SC16_Com[7]=ETX;
1504   1      SC16_Com[8]=0;
1505   1      
1506   1      #ifdef BCC_noSTXEXT          ////XOR 1-6
              for(loop=1;loop<=6;loop++)
              SC16_Com[8]^=SC16_Com[loop];
              #else                                 //XOR 0-7
1510   1      for(loop=0;loop<=7;loop++)
1511   1      SC16_Com[8]^=SC16_Com[loop];
1512   1      #endif
1513   1      
1514   1      
1515   1      
1516   1              for(loop=0;loop<=8;loop++)
1517   1              {
1518   2              RS_tx(SC16_Com[loop]);
1519   2              //DELAY_FOR(200);
1520   2              }
1521   1      
1522   1      }
1523          
1524          void Camera_Version_check(void)
1525          {
1526   1      //U16 val=0;
1527   1      U8 loop;
1528   1      
1529   1      SC16_Com[0]=STX;
1530   1      SC16_Com[1]=0x32;
1531   1      SC16_Com[2]=0x4f;
1532   1      SC16_Com[3]=Camera_ver0;
1533   1      SC16_Com[4]=Camera_ver1;
1534   1      //SC16_Com[5]=Ver2+0x30;
1535   1      SC16_Com[5]=Camera_ver2;
1536   1      SC16_Com[6]=0x20;
1537   1      SC16_Com[7]=ETX;
1538   1      SC16_Com[8]=0;
1539   1      
1540   1      #ifdef BCC_noSTXEXT          ////XOR 1-6
              for(loop=1;loop<=6;loop++)
              SC16_Com[8]^=SC16_Com[loop];
C51 COMPILER V9.01   MAIN                                                                  12/17/2018 16:46:12 PAGE 26  

              #else                                 //XOR 0-7
1544   1      for(loop=0;loop<=7;loop++)
1545   1      SC16_Com[8]^=SC16_Com[loop];
1546   1      #endif
1547   1      
1548   1      
1549   1      
1550   1              for(loop=0;loop<=8;loop++)
1551   1              {
1552   2              RS_tx(SC16_Com[loop]);
1553   2              //DELAY_FOR(200);
1554   2              }
1555   1      
1556   1      }
1557          //---------------------------------------------------
1558          
1559          // ===========================================================================
1560          // END of File 
1561          // ===========================================================================


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2518    ----
   CONSTANT SIZE    =    467    ----
   XDATA SIZE       =     69     490
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
